// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sql/generic/sqlParseSupport';

var genericSyntaxParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[4,8,12,16,162,174,241,271,321,337,340,344],$V1=[2,625],$V2=[340,344],$V3=[2,626],$V4=[1,35],$V5=[1,27],$V6=[1,28],$V7=[1,18],$V8=[1,36],$V9=[1,33],$Va=[1,34],$Vb=[1,29],$Vc=[1,32],$Vd=[1,30],$Ve=[1,45],$Vf=[1,47],$Vg=[1,43],$Vh=[1,46],$Vi=[1,42],$Vj=[81,340,344],$Vk=[2,451],$Vl=[1,53],$Vm=[1,61],$Vn=[1,62],$Vo=[1,75],$Vp=[2,413],$Vq=[1,80],$Vr=[1,81],$Vs=[32,267],$Vt=[16,32,43,50,54,55,63,77,79,81,85,95,107,108,109,112,113,120,125,129,140,142,154,182,190,201,214,215,216,217,218,219,220,221,222,226,228,232,239,240,253,262,264,267,340,344,348,349,352,356,357,358,359,360,361,363,366,367,368,369,371,374,375,376,377,379,380,382,384,385,386,387,388,391,392,406,437,439,440,441,443,444,445,446,447,448,449,450,451,452,453,454,458,461],$Vu=[81,262,340,344],$Vv=[63,113,228,340,344,348,349],$Vw=[2,783],$Vx=[1,95],$Vy=[63,113,228,348,349,358],$Vz=[63,113,228,306,340,344,348,349,358],$VA=[2,779],$VB=[1,100],$VC=[16,63,113,228,348,349,358],$VD=[79,85,241],$VE=[1,166],$VF=[1,167],$VG=[1,122],$VH=[1,117],$VI=[1,128],$VJ=[1,130],$VK=[1,132],$VL=[1,115],$VM=[1,164],$VN=[1,168],$VO=[1,169],$VP=[1,133],$VQ=[1,155],$VR=[1,156],$VS=[1,157],$VT=[1,158],$VU=[1,159],$VV=[1,160],$VW=[1,161],$VX=[1,162],$VY=[1,148],$VZ=[1,149],$V_=[1,142],$V$=[1,131],$V01=[1,143],$V11=[1,118],$V21=[1,120],$V31=[1,119],$V41=[1,123],$V51=[1,121],$V61=[1,163],$V71=[1,165],$V81=[54,55,63,79,81,95,96,107,112,113,228,241,253,267,269,270,271,294,295,296,297,298,299,300,301,302,303,304,306,307,348,349,351,352,355,358,362,370,389,390],$V91=[81,85,182,262,340,344],$Va1=[2,1129],$Vb1=[1,221],$Vc1=[1,237],$Vd1=[1,238],$Ve1=[1,225],$Vf1=[1,222],$Vg1=[1,223],$Vh1=[1,224],$Vi1=[1,231],$Vj1=[1,230],$Vk1=[1,229],$Vl1=[1,232],$Vm1=[1,227],$Vn1=[1,226],$Vo1=[1,220],$Vp1=[1,228],$Vq1=[1,240],$Vr1=[1,239],$Vs1=[1,234],$Vt1=[32,43,54,55,63,77,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$Vu1=[1,246],$Vv1=[1,252],$Vw1=[1,254],$Vx1=[32,43,54,55,63,77,79,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$Vy1=[1,259],$Vz1=[32,43,50,54,55,63,77,79,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,267,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$VA1=[32,43,54,55,63,77,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,318,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$VB1=[43,54,55,63,81,85,113,125,140,154,190,201,214,215,216,217,218,219,220,221,222,226,228,232,262,264,340,344,348,349,358],$VC1=[43,50,81,85,95,96,109,182,190,201,214,215,216,217,218,219,220,221,222,226,232,262,264,340,344],$VD1=[81,85],$VE1=[2,46],$VF1=[1,287],$VG1=[43,340,344],$VH1=[43,125,340,344],$VI1=[43,50,77,79,125,340,344],$VJ1=[43,50],$VK1=[264,340,344],$VL1=[85,182,264,340,344],$VM1=[32,50,81,85],$VN1=[174,241],$VO1=[2,1107],$VP1=[81,190,201,226,232,262,340,344],$VQ1=[2,464],$VR1=[1,316],$VS1=[96,247,269,270],$VT1=[1,343],$VU1=[1,345],$VV1=[1,346],$VW1=[1,350],$VX1=[1,351],$VY1=[1,352],$VZ1=[1,355],$V_1=[1,360],$V$1=[1,361],$V02=[1,364],$V12=[1,368],$V22=[1,370],$V32=[1,344],$V42=[1,347],$V52=[1,348],$V62=[1,349],$V72=[1,353],$V82=[1,354],$V92=[1,356],$Va2=[1,357],$Vb2=[1,358],$Vc2=[1,359],$Vd2=[1,362],$Ve2=[1,363],$Vf2=[1,365],$Vg2=[1,366],$Vh2=[1,367],$Vi2=[1,369],$Vj2=[81,85,182,190,201,214,215,216,217,218,219,220,221,222,226,232,262,264,340,344],$Vk2=[43,54,55,63,81,85,95,113,129,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,262,264,340,344,348,349,356,358,359,368,369,377,382,386,392,458],$Vl2=[32,43,54,55,63,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,377,382,386,392,458,461],$Vm2=[368,369,392],$Vn2=[54,55,63,79,95,96,107,112,113,228,267,269,270,271,294,295,296,297,298,299,300,301,302,303,304,306,307,348,349,351,352,355,358,362,370,389,390],$Vo2=[32,43,50,54,55,63,77,81,85,95,96,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,222,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$Vp2=[81,201,226,232,262,340,344],$Vq2=[81,85,190,201,226,232,262,264,340,344],$Vr2=[1,447],$Vs2=[1,450],$Vt2=[1,448],$Vu2=[1,452],$Vv2=[1,449],$Vw2=[1,451],$Vx2=[1,454],$Vy2=[1,453],$Vz2=[81,85,190,201,214,215,216,217,218,219,220,221,222,226,232,262,264,340,344],$VA2=[43,54,55,63,81,85,113,190,201,214,215,216,217,218,219,220,221,222,226,228,232,262,264,340,344,348,349,358],$VB2=[32,43,54,55,63,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,262,264,340,344,348,349,356,358,359,368,369,377,382,386,392,458],$VC2=[43,54,55,63,81,85,113,129,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,262,264,340,344,348,349,356,358,368,369,377,382,386,392,458],$VD2=[32,43,54,55,63,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,377,382,386,392,458],$VE2=[32,43,50,54,55,63,77,81,85,95,96,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$VF2=[2,916],$VG2=[1,468],$VH2=[2,918],$VI2=[1,471],$VJ2=[1,481],$VK2=[81,232],$VL2=[1,496],$VM2=[1,510],$VN2=[1,511],$VO2=[1,512],$VP2=[81,226,232,262,340,344],$VQ2=[63,79,113,228,348,349,358],$VR2=[1,545],$VS2=[81,85,232],$VT2=[32,43,54,55,63,77,81,85,95,108,109,113,129,142,182,190,201,214,215,216,217,218,219,220,221,222,226,228,232,239,240,253,262,264,340,344,348,349,352,356,357,358,359,368,369,374,376,377,379,380,382,386,392,458,461],$VU2=[1,555],$VV2=[85,340,344],$VW2=[1,572],$VX2=[1,573],$VY2=[50,81,85,95,96,109],$VZ2=[81,226,262,340,344],$V_2=[81,85,190,201,214,215,216,217,218,219,220,221,226,232,262,264,340,344],$V$2=[2,372],$V03=[1,588],$V13=[50,81,85,95,96],$V23=[81,85,201,226,232,262,340,344],$V33=[359,515],$V43=[1,646],$V53=[85,109],$V63=[81,356,364,389,515],$V73=[2,1165],$V83=[81,85,129,226,262,340,344,382],$V93=[81,356],$Va3=[2,1175],$Vb3=[1,676],$Vc3=[1,677],$Vd3=[1,678],$Ve3=[1,686],$Vf3=[1,687],$Vg3=[2,1180],$Vh3=[1,693],$Vi3=[372,378],$Vj3=[2,196],$Vk3=[2,197];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"DataDefinition_EDIT":3,"ALTER":4,"CURSOR":5,"AlterTable_EDIT":6,"AlterView_EDIT":7,"CREATE":8,"DatabaseDefinition_EDIT":9,"TableDefinition_EDIT":10,"ViewDefinition_EDIT":11,"DROP":12,"DropDatabaseStatement_EDIT":13,"DropTableStatement_EDIT":14,"DropViewStatement_EDIT":15,"SET":16,"TruncateTableStatement_EDIT":17,"UseStatement_EDIT":18,"DataDefinition":19,"AlterTable":20,"AlterView":21,"DatabaseDefinition":22,"RoleDefinition":23,"TableDefinition":24,"ViewDefinition":25,"DropDatabaseStatement":26,"DropRoleStatement":27,"DropTableStatement":28,"DropViewStatement":29,"ALL":30,"SetOption":31,"=":32,"SetValue":33,"TruncateTableStatement":34,"UseStatement":35,"AlterTableLeftSide":36,"PartitionSpec":37,"AlterTableLeftSide_EDIT":38,"TABLE":39,"SchemaQualifiedTableIdentifier":40,"SchemaQualifiedTableIdentifier_EDIT":41,"AlterViewLeftSide":42,"AS":43,"QuerySpecification":44,"AlterViewLeftSide_EDIT":45,"QuerySpecification_EDIT":46,"VIEW":47,"OptionalComment":48,"Comment":49,"COMMENT":50,"QuotedValue":51,"OptionalComment_INVALID":52,"Comment_INVALID":53,"SINGLE_QUOTE":54,"DOUBLE_QUOTE":55,"VALUE":56,"DatabaseOrSchema":57,"OptionalIfNotExists":58,"RegularIdentifier":59,"DatabaseDefinitionOptionals":60,"OptionalIfNotExists_EDIT":61,"DatabaseDefinitionOptionals_EDIT":62,"ROLE":63,"TableDefinitionRightPart":64,"TableDefinitionRightPart_EDIT":65,"TableIdentifierAndOptionalColumnSpecification":66,"OptionalPartitionedBy":67,"OptionalAsSelectStatement":68,"TableIdentifierAndOptionalColumnSpecification_EDIT":69,"PartitionedBy_EDIT":70,"OptionalAsSelectStatement_EDIT":71,"SchemaQualifiedIdentifier":72,"OptionalColumnSpecificationsOrLike":73,"OptionalColumnSpecificationsOrLike_EDIT":74,"SchemaQualifiedIdentifier_EDIT":75,"ParenthesizedColumnSpecificationList":76,"LIKE":77,"ParenthesizedColumnSpecificationList_EDIT":78,"(":79,"ColumnSpecificationList":80,")":81,"ColumnSpecificationList_EDIT":82,"RightParenthesisOrError":83,"ColumnSpecification":84,",":85,"ColumnSpecification_EDIT":86,"ColumnIdentifier":87,"ColumnDataType":88,"OptionalColumnOptions":89,"ColumnDataType_EDIT":90,"ColumnOptions_EDIT":91,"ColumnOptions":92,"ColumnOption":93,"ColumnOption_EDIT":94,"NOT":95,"NULL":96,"PrimitiveType":97,"ArrayType":98,"MapType":99,"StructType":100,"ArrayType_INVALID":101,"MapType_INVALID":102,"StructType_INVALID":103,"ArrayType_EDIT":104,"MapType_EDIT":105,"StructType_EDIT":106,"ARRAY":107,"<":108,">":109,"AnyCursor":110,"GreaterThanOrError":111,"MAP":112,"STRUCT":113,"StructDefinitionList":114,"StructDefinitionList_EDIT":115,"StructDefinition":116,"StructDefinition_EDIT":117,"Commas":118,"RegularOrBacktickedIdentifier":119,":":120,"ColumnDataTypeList":121,"ColumnDataTypeList_EDIT":122,"ColumnDataTypeListInner_EDIT":123,"PartitionedBy":124,"PARTITION":125,"BY":126,"RangeClause":127,"RangeClause_EDIT":128,"RANGE":129,"ParenthesizedColumnList":130,"ParenthesizedPartitionValuesList":131,"ParenthesizedColumnList_EDIT":132,"ParenthesizedPartitionValuesList_EDIT":133,"PartitionValueList":134,"PartitionValueList_EDIT":135,"PartitionValue":136,"PartitionValue_EDIT":137,"ValueExpression":138,"LessThanOrEqualTo":139,"VALUES":140,"ValueExpression_EDIT":141,"COMPARISON_OPERATOR":142,"CommitLocations":143,"OptionalParenthesizedViewColumnList":144,"ParenthesizedViewColumnList_EDIT":145,"ParenthesizedViewColumnList":146,"ViewColumnList":147,"ViewColumnList_EDIT":148,"ColumnReference":149,"OptionalIfExists":150,"OptionalCascade":151,"OptionalIfExists_EDIT":152,"OptionalPurge":153,"PURGE":154,"DataManipulation":155,"InsertStatement":156,"UpdateStatement":157,"InsertValuesStatement":158,"DataManipulation_EDIT":159,"InsertValuesStatement_EDIT":160,"UpdateStatement_EDIT":161,"INSERT":162,"INTO":163,"OptionalTable":164,"InsertValuesList":165,"ParenthesizedRowValuesList":166,"InValueList":167,"CommonTableExpression":168,"SelectStatement":169,"OptionalUnions":170,"SelectStatement_EDIT":171,"OptionalUnions_EDIT":172,"CommonTableExpression_EDIT":173,"WITH":174,"WithQueries":175,"WithQueries_EDIT":176,"WithQuery":177,"WithQuery_EDIT":178,"TableSubQueryInner":179,"TableSubQueryInner_EDIT":180,"FromClause":181,"FROM":182,"TableReferenceList":183,"FromClause_EDIT":184,"TableReferenceList_EDIT":185,"TableReference":186,"TableReference_EDIT":187,"OptionalGroupByClause":188,"GroupByClause":189,"GROUP":190,"GroupByColumnList":191,"GroupByClause_EDIT":192,"GroupByColumnList_EDIT":193,"ColumnGroupingSets":194,"ColumnGroupingSets_EDIT":195,"ColumnGroupingSet_EDIT":196,"ColumnReference_EDIT":197,"GroupByColumnListPartTwo_EDIT":198,"OptionalHavingClause":199,"HavingClause":200,"HAVING":201,"HavingClause_EDIT":202,"OptionalJoins":203,"Joins":204,"Joins_INVALID":205,"JoinType":206,"TablePrimary":207,"OptionalJoinCondition":208,"Join_EDIT":209,"JoinType_EDIT":210,"TablePrimary_EDIT":211,"JoinCondition_EDIT":212,"Joins_EDIT":213,"CROSS":214,"JOIN":215,"FULL":216,"OUTER":217,"INNER":218,"LEFT":219,"SEMI":220,"RIGHT":221,"ON":222,"UsingColList":223,"OptionalLimitClause":224,"LimitClause":225,"LIMIT":226,"UnsignedNumericLiteral":227,"VARIABLE_REFERENCE":228,"LimitClause_EDIT":229,"OptionalOrderByClause":230,"OrderByClause":231,"ORDER":232,"OrderByColumnList":233,"OrderByClause_EDIT":234,"OrderByColumnList_EDIT":235,"OrderByIdentifier":236,"OrderByIdentifier_EDIT":237,"OptionalAscOrDesc":238,"ASC":239,"DESC":240,"SELECT":241,"OptionalAllOrDistinct":242,"SelectList":243,"TableExpression":244,"SelectList_EDIT":245,"TableExpression_EDIT":246,"DISTINCT":247,"OptionalSelectConditions":248,"OptionalSelectConditions_EDIT":249,"SelectSpecification":250,"SelectSpecification_EDIT":251,"OptionalCorrelationName":252,"*":253,"OptionalCorrelationName_EDIT":254,"OptionalWhereClause":255,"WhereClause_EDIT":256,"WhereClause":257,"Unions":258,"Unions_EDIT":259,"UnionClause":260,"UnionClause_EDIT":261,"UNION":262,"NewStatement":263,"WHERE":264,"SearchCondition":265,"SearchCondition_EDIT":266,".":267,"SignedInteger":268,"TRUE":269,"FALSE":270,"TRUNCATE":271,"OptionalPartitionSpec":272,"UserDefinedFunction":273,"AggregateFunction":274,"OptionalOverClause":275,"AnalyticFunction":276,"OverClause":277,"CastFunction":278,"UserDefinedFunction_EDIT":279,"AggregateFunction_EDIT":280,"OptionalOverClause_EDIT":281,"AnalyticFunction_EDIT":282,"OverClause_EDIT":283,"CastFunction_EDIT":284,"OtherAggregateFunction":285,"CountFunction":286,"SumFunction":287,"OtherAggregateFunction_EDIT":288,"CountFunction_EDIT":289,"SumFunction_EDIT":290,"OtherAggregateFunction_Type":291,"UdfArgumentList":292,"UdfArgumentList_EDIT":293,"AVG":294,"MAX":295,"MIN":296,"STDDEV_POP":297,"STDDEV_SAMP":298,"VAR_POP":299,"VAR_SAMP":300,"VARIANCE":301,"COUNT":302,"SUM":303,"ANALYTIC":304,"ArbitraryFunctionName":305,"IF":306,"CAST":307,"NonParenthesizedValueExpressionPrimary":308,"ColumnOrArbitraryFunctionRef":309,"ArbitraryFunctionRightPart":310,"UnsignedValueSpecification":311,"NonParenthesizedValueExpressionPrimary_EDIT":312,"ArbitraryFunctionRightPart_EDIT":313,"UnsignedValueSpecification_EDIT":314,"ColumnOrArbitraryFunctionRef_EDIT":315,"ArbitraryFunction":316,"ArbitraryFunction_EDIT":317,"OVER":318,"WindowExpression":319,"WindowExpression_EDIT":320,"UPDATE":321,"TargetTable":322,"SetClauseList":323,"OptionalFromJoinedTable":324,"TargetTable_EDIT":325,"SetClauseList_EDIT":326,"FromJoinedTable_EDIT":327,"TableName":328,"TableName_EDIT":329,"LocalOrSchemaQualifiedName":330,"LocalOrSchemaQualifiedName_EDIT":331,"SetClause":332,"SetClause_EDIT":333,"SetTarget":334,"UpdateSource":335,"UpdateSource_EDIT":336,"USE":337,"SqlSyntax":338,"SqlStatements":339,"EOF":340,"SqlAutocomplete":341,"SqlStatements_EDIT":342,"SqlStatement":343,";":344,"SqlStatement_EDIT":345,"SetSpecification_EDIT":346,"NonReservedKeyword":347,"OPTION":348,"REGULAR_IDENTIFIER":349,"NonStartingToken":350,"!":351,"-":352,"[":353,"]":354,"~":355,"AND":356,"ARITHMETIC_OPERATOR":357,"BACKTICK":358,"BETWEEN":359,"BIGINT":360,"BOOLEAN":361,"CASE":362,"CHAR":363,"CURRENT":364,"DATABASE":365,"DECIMAL":366,"DOUBLE":367,"ELSE":368,"END":369,"EXISTS":370,"FLOAT":371,"FOLLOWING":372,"HDFS_START_QUOTE":373,"IN":374,"INT":375,"IS":376,"OR":377,"PRECEDING":378,"REGEXP":379,"RLIKE":380,"ROW":381,"ROWS":382,"SCHEMA":383,"SMALLINT":384,"STRING":385,"THEN":386,"TIMESTAMP":387,"TINYINT":388,"UNSIGNED_INTEGER":389,"UNSIGNED_INTEGER_E":390,"VARCHAR":391,"WHEN":392,"PARTIAL_CURSOR":393,"FromOrIn":394,"SingleQuotedValue":395,"SingleQuotedValue_EDIT":396,"PARTIAL_VALUE":397,"DoubleQuotedValue":398,"DoubleQuotedValue_EDIT":399,"QuotedValue_EDIT":400,"OptionalFromOrInDatabase":401,"FromOrInDatabases":402,"DatabaseIdentifier":403,"FromOrInDatabase_EDIT":404,"DatabaseIdentifier_EDIT":405,"CASCADE":406,"IfExists_EDIT":407,"IfNotExists_EDIT":408,"OptionalInDatabase":409,"OptionalPartitionSpec_EDIT":410,"PartitionSpec_EDIT":411,"PartitionSpecList":412,"PartitionSpecList_EDIT":413,"RangePartitionSpec":414,"RangePartitionComparisonOperator":415,"RangePartitionSpec_EDIT":416,"ConfigurationName":417,"PartialBacktickedOrAnyCursor":418,"PartialBacktickedIdentifier":419,"PartialBacktickedOrCursor":420,"PartialBacktickedOrPartialCursor":421,"OptionalParenthesizedColumnList":422,"OptionalParenthesizedColumnList_EDIT":423,"ColumnList":424,"ColumnList_EDIT":425,"ParenthesizedSimpleValueList":426,"SimpleValueList":427,"PartitionExpression":428,"PartitionExpression_EDIT":429,"RegularOrBackTickedSchemaQualifiedName":430,"RegularOrBackTickedSchemaQualifiedName_EDIT":431,"BasicIdentifierChain":432,"BasicIdentifierChain_EDIT":433,"DerivedColumnChain":434,"DerivedColumnChain_EDIT":435,"PartialBacktickedIdentifierOrPartialCursor":436,"BINARY":437,"OptionalTypeLength":438,"CHARACTER":439,"DATE":440,"DATETIME":441,"OptionalTypePrecision":442,"FLOAT4":443,"FLOAT8":444,"INTEGER":445,"NUMBER":446,"NUMERIC":447,"REAL":448,"TEXT":449,"TIME":450,"TIMESTAMP_LTZ":451,"TIMESTAMP_NTZ":452,"TIMESTAMP_TZ":453,"VARBINARY":454,"OptionalNot":455,"TableSubQuery":456,"ValueExpressionList":457,"BETWEEN_AND":458,"LikeRightPart":459,"CaseRightPart":460,"::":461,"TableSubQuery_EDIT":462,"ValueExpressionInSecondPart_EDIT":463,"LikeRightPart_EDIT":464,"CaseRightPart_EDIT":465,"EndOrError":466,"PrimitiveTypeOrError":467,"ValueExpressionList_EDIT":468,"+":469,"UnsignedLiteral":470,"UnsignedLiteral_EDIT":471,"GeneralLiteral":472,"GeneralLiteral_EDIT":473,"ExactNumericLiteral":474,"ApproximateNumericLiteral":475,"TruthValue":476,"TablePrimaryOrJoinedTable":477,"TablePrimaryOrJoinedTable_EDIT":478,"JoinedTable":479,"JoinedTable_EDIT":480,"TableOrQueryName":481,"DerivedTable":482,"TableOrQueryName_EDIT":483,"DerivedTable_EDIT":484,"OptionalOnColumn":485,"OptionalOnColumn_EDIT":486,"PushQueryState":487,"PopQueryState":488,"SubQuery":489,"SubQuery_EDIT":490,"QueryExpression":491,"QueryExpression_EDIT":492,"QueryExpressionBody":493,"QueryExpressionBody_EDIT":494,"NonJoinQueryExpression":495,"NonJoinQueryExpression_EDIT":496,"NonJoinQueryTerm":497,"NonJoinQueryTerm_EDIT":498,"NonJoinQueryPrimary":499,"NonJoinQueryPrimary_EDIT":500,"SimpleTable":501,"SimpleTable_EDIT":502,"OptionalPartitionBy":503,"OptionalOrderByAndWindow":504,"PartitionBy_EDIT":505,"OptionalOrderByAndWindow_EDIT":506,"PartitionBy":507,"OptionalWindowSpec":508,"WindowSpec_EDIT":509,"WindowSpec":510,"RowsOrRange":511,"PopLexerState":512,"OptionalCurrentOrPreceding":513,"OptionalAndFollowing":514,"UNBOUNDED":515,"OptionalCurrentOrPreceding_EDIT":516,"OptionalAndFollowing_EDIT":517,"PushHdfsLexerState":518,"HdfsPath":519,"HDFS_PATH":520,"HDFS_END_QUOTE":521,"HdfsPath_EDIT":522,"IntegerOrUnbounded":523,"CaseWhenThenList":524,"CaseWhenThenList_EDIT":525,"CaseWhenThenListPartTwo":526,"CaseWhenThenListPartTwo_EDIT":527,"$accept":0,"$end":1},
terminals_: {2:"error",4:"ALTER",5:"CURSOR",8:"CREATE",12:"DROP",16:"SET",30:"ALL",32:"=",39:"TABLE",43:"AS",47:"VIEW",50:"COMMENT",54:"SINGLE_QUOTE",55:"DOUBLE_QUOTE",56:"VALUE",63:"ROLE",77:"LIKE",79:"(",81:")",85:",",95:"NOT",96:"NULL",107:"ARRAY",108:"<",109:">",112:"MAP",113:"STRUCT",120:":",125:"PARTITION",126:"BY",129:"RANGE",140:"VALUES",142:"COMPARISON_OPERATOR",154:"PURGE",162:"INSERT",163:"INTO",174:"WITH",182:"FROM",190:"GROUP",201:"HAVING",214:"CROSS",215:"JOIN",216:"FULL",217:"OUTER",218:"INNER",219:"LEFT",220:"SEMI",221:"RIGHT",222:"ON",226:"LIMIT",228:"VARIABLE_REFERENCE",232:"ORDER",239:"ASC",240:"DESC",241:"SELECT",247:"DISTINCT",253:"*",262:"UNION",264:"WHERE",267:".",269:"TRUE",270:"FALSE",271:"TRUNCATE",294:"AVG",295:"MAX",296:"MIN",297:"STDDEV_POP",298:"STDDEV_SAMP",299:"VAR_POP",300:"VAR_SAMP",301:"VARIANCE",302:"COUNT",303:"SUM",304:"ANALYTIC",306:"IF",307:"CAST",318:"OVER",321:"UPDATE",337:"USE",340:"EOF",344:";",346:"SetSpecification_EDIT",348:"OPTION",349:"REGULAR_IDENTIFIER",351:"!",352:"-",353:"[",354:"]",355:"~",356:"AND",357:"ARITHMETIC_OPERATOR",358:"BACKTICK",359:"BETWEEN",360:"BIGINT",361:"BOOLEAN",362:"CASE",363:"CHAR",364:"CURRENT",365:"DATABASE",366:"DECIMAL",367:"DOUBLE",368:"ELSE",369:"END",370:"EXISTS",371:"FLOAT",372:"FOLLOWING",373:"HDFS_START_QUOTE",374:"IN",375:"INT",376:"IS",377:"OR",378:"PRECEDING",379:"REGEXP",380:"RLIKE",381:"ROW",382:"ROWS",383:"SCHEMA",384:"SMALLINT",385:"STRING",386:"THEN",387:"TIMESTAMP",388:"TINYINT",389:"UNSIGNED_INTEGER",390:"UNSIGNED_INTEGER_E",391:"VARCHAR",392:"WHEN",393:"PARTIAL_CURSOR",397:"PARTIAL_VALUE",406:"CASCADE",437:"BINARY",439:"CHARACTER",440:"DATE",441:"DATETIME",443:"FLOAT4",444:"FLOAT8",445:"INTEGER",446:"NUMBER",447:"NUMERIC",448:"REAL",449:"TEXT",450:"TIME",451:"TIMESTAMP_LTZ",452:"TIMESTAMP_NTZ",453:"TIMESTAMP_TZ",454:"VARBINARY",458:"BETWEEN_AND",461:"::",469:"+",515:"UNBOUNDED",520:"HDFS_PATH",521:"HDFS_END_QUOTE"},
productions_: [0,[3,2],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[3,1],[3,2],[3,1],[3,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,4],[19,1],[19,1],[20,2],[6,1],[6,2],[6,2],[6,3],[36,3],[38,3],[38,3],[21,3],[7,1],[7,2],[7,3],[7,3],[7,3],[42,3],[45,3],[45,3],[48,0],[48,1],[49,2],[52,1],[53,2],[53,2],[53,3],[53,3],[22,3],[22,5],[9,4],[9,3],[9,5],[9,4],[9,6],[60,1],[62,1],[23,3],[24,4],[10,4],[10,4],[10,3],[64,3],[65,3],[65,3],[65,3],[65,3],[66,2],[69,2],[69,2],[73,0],[73,1],[73,2],[74,1],[74,2],[74,2],[76,3],[78,3],[80,1],[80,3],[82,1],[82,3],[82,3],[82,5],[82,2],[82,4],[82,4],[82,6],[84,3],[86,3],[86,3],[86,3],[89,0],[89,1],[92,1],[92,2],[91,1],[91,2],[91,2],[91,3],[93,2],[93,1],[93,1],[94,2],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[90,1],[90,1],[90,1],[98,4],[101,3],[104,4],[104,4],[99,6],[102,3],[105,6],[105,4],[105,6],[105,5],[100,4],[103,3],[106,4],[114,1],[114,3],[115,1],[115,2],[115,3],[115,3],[115,5],[116,4],[117,5],[117,4],[117,4],[117,4],[117,3],[117,3],[121,1],[121,3],[122,1],[122,2],[122,3],[122,3],[122,5],[123,2],[123,2],[123,1],[123,1],[111,1],[111,1],[67,0],[67,1],[124,3],[70,2],[70,3],[70,3],[127,3],[128,2],[128,2],[128,3],[128,3],[128,3],[131,3],[133,3],[133,3],[134,1],[134,3],[135,1],[135,3],[135,5],[135,3],[135,5],[136,6],[136,4],[136,4],[137,2],[137,2],[137,3],[137,4],[137,4],[137,5],[137,6],[137,6],[137,3],[137,4],[137,4],[139,1],[139,1],[68,0],[68,3],[71,3],[71,3],[143,0],[25,8],[11,4],[11,9],[11,3],[11,6],[11,7],[11,8],[11,8],[11,8],[144,0],[144,1],[146,3],[145,3],[147,2],[147,4],[148,3],[148,5],[148,5],[148,7],[26,5],[13,3],[13,3],[13,4],[13,5],[13,5],[13,6],[27,3],[28,5],[14,3],[14,4],[14,5],[14,5],[14,6],[153,0],[153,1],[29,4],[15,4],[15,5],[15,3],[15,4],[15,4],[155,1],[155,1],[156,1],[159,1],[159,1],[158,6],[160,2],[160,4],[160,4],[160,5],[160,6],[165,1],[165,3],[166,3],[164,0],[164,1],[44,3],[44,5],[44,2],[46,4],[46,3],[46,3],[46,1],[46,4],[46,3],[46,2],[46,2],[168,2],[173,2],[175,1],[175,3],[176,1],[176,3],[176,3],[176,5],[177,5],[178,2],[178,5],[178,5],[181,2],[184,2],[184,2],[183,1],[183,3],[185,1],[185,3],[185,3],[185,5],[185,3],[188,0],[188,1],[189,3],[192,3],[192,3],[192,2],[194,0],[194,1],[194,3],[194,3],[195,1],[195,3],[195,3],[195,5],[195,3],[196,1],[196,1],[191,1],[191,3],[193,1],[193,2],[193,3],[193,3],[193,3],[193,4],[193,5],[198,1],[198,2],[198,1],[199,0],[199,1],[200,2],[202,2],[202,2],[203,0],[203,1],[203,1],[204,3],[204,4],[205,1],[205,2],[209,3],[209,1],[209,3],[209,3],[209,3],[213,1],[213,2],[213,2],[213,3],[206,2],[206,2],[206,3],[206,2],[206,1],[206,3],[206,2],[206,3],[206,3],[206,2],[206,3],[206,2],[206,3],[206,3],[206,2],[210,2],[210,3],[210,3],[210,2],[210,3],[210,3],[210,3],[210,3],[210,2],[210,3],[210,3],[210,3],[210,3],[210,2],[208,0],[208,2],[223,1],[223,3],[212,2],[212,2],[224,0],[224,1],[225,2],[225,4],[225,2],[225,4],[229,2],[230,0],[230,1],[231,3],[234,3],[234,2],[233,1],[233,3],[235,1],[235,2],[235,3],[235,4],[235,5],[236,2],[237,2],[237,2],[238,0],[238,1],[238,1],[169,3],[169,4],[171,3],[171,3],[171,4],[171,4],[171,4],[171,5],[171,6],[171,4],[242,0],[242,1],[242,1],[244,2],[246,2],[246,4],[246,3],[243,1],[243,3],[245,1],[245,2],[245,3],[245,3],[245,3],[245,4],[245,3],[245,3],[245,4],[245,4],[245,4],[245,5],[245,5],[250,2],[250,1],[251,2],[251,3],[251,2],[248,5],[249,5],[249,5],[249,5],[249,5],[249,5],[249,6],[249,6],[249,6],[249,6],[249,6],[170,0],[170,1],[172,1],[258,1],[258,2],[259,1],[259,2],[259,2],[259,3],[260,4],[261,3],[261,4],[261,4],[255,0],[255,1],[257,2],[256,2],[256,2],[265,1],[266,1],[31,1],[31,3],[33,1],[33,1],[33,2],[33,1],[33,1],[33,1],[33,1],[34,4],[17,2],[17,4],[17,3],[17,4],[17,5],[17,5],[17,5],[273,2],[273,2],[273,1],[279,1],[279,2],[279,1],[279,2],[279,2],[279,2],[279,1],[274,1],[274,1],[274,1],[280,1],[280,1],[280,1],[285,4],[285,5],[288,5],[288,6],[288,5],[291,1],[291,1],[291,1],[291,1],[291,1],[291,1],[291,1],[291,1],[286,4],[286,3],[286,5],[289,5],[289,6],[289,5],[287,5],[287,3],[290,5],[290,6],[290,5],[276,3],[276,4],[282,4],[282,5],[282,4],[305,1],[305,1],[305,1],[305,1],[278,6],[278,3],[284,6],[284,5],[284,4],[284,6],[284,5],[284,4],[284,6],[284,5],[284,6],[284,5],[308,2],[308,2],[308,1],[308,1],[308,1],[308,1],[312,2],[312,2],[312,1],[312,1],[312,1],[316,2],[316,2],[317,2],[317,2],[310,2],[310,3],[313,3],[313,4],[313,3],[292,1],[292,3],[293,1],[293,3],[293,3],[293,5],[293,3],[293,5],[293,4],[293,3],[293,2],[293,2],[293,4],[275,0],[275,1],[281,1],[277,2],[277,2],[283,2],[157,6],[161,6],[161,6],[161,6],[161,6],[161,7],[161,3],[161,2],[161,2],[161,2],[322,1],[325,1],[328,1],[329,1],[323,1],[323,3],[326,1],[326,3],[326,3],[326,5],[332,3],[333,3],[333,2],[333,1],[334,1],[335,1],[336,1],[324,0],[324,2],[327,2],[327,2],[35,2],[18,2],[18,3],[338,3],[341,3],[341,3],[263,0],[339,0],[339,1],[339,4],[342,1],[342,4],[342,4],[342,7],[343,1],[343,1],[343,1],[345,1],[345,2],[345,1],[345,1],[345,1],[345,1],[347,1],[347,1],[347,1],[59,1],[59,1],[59,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[350,1],[118,1],[118,2],[110,1],[110,1],[394,1],[394,1],[57,1],[57,1],[395,3],[395,2],[396,2],[398,3],[398,2],[399,2],[51,1],[51,1],[400,1],[400,1],[401,0],[401,1],[402,2],[404,2],[151,0],[151,1],[150,0],[150,2],[407,1],[152,2],[58,0],[58,3],[408,1],[61,2],[61,3],[409,0],[409,2],[409,2],[272,0],[272,1],[410,1],[37,4],[411,4],[414,5],[416,2],[416,3],[416,4],[416,5],[416,5],[416,5],[415,1],[415,1],[415,1],[415,1],[417,1],[417,1],[418,1],[418,1],[420,1],[420,1],[421,1],[421,1],[419,2],[83,1],[83,1],[422,0],[422,1],[423,1],[130,3],[132,3],[132,3],[424,1],[424,3],[425,3],[425,5],[426,3],[427,1],[427,3],[40,1],[40,3],[40,5],[41,1],[41,3],[41,5],[41,3],[41,5],[41,5],[72,1],[72,3],[72,5],[75,1],[75,3],[75,3],[403,1],[405,1],[412,1],[412,3],[413,1],[413,3],[413,3],[413,5],[428,3],[429,3],[429,3],[429,3],[429,1],[119,1],[119,3],[119,2],[430,1],[430,3],[430,5],[431,1],[431,3],[431,5],[330,1],[330,2],[331,1],[331,2],[149,1],[149,3],[197,1],[432,1],[432,3],[433,3],[433,5],[434,1],[434,3],[435,1],[435,3],[435,5],[435,3],[87,1],[436,1],[436,1],[97,1],[97,1],[97,1],[97,2],[97,2],[97,1],[97,1],[97,2],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,2],[97,2],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,1],[97,2],[97,2],[438,0],[438,3],[442,0],[442,3],[442,5],[138,1],[138,2],[138,2],[138,2],[138,2],[138,4],[138,4],[138,4],[138,6],[138,2],[138,3],[138,3],[138,3],[138,3],[138,3],[138,6],[138,6],[138,5],[138,5],[138,6],[138,5],[138,3],[138,3],[138,3],[138,3],[138,3],[138,2],[138,3],[138,2],[138,3],[138,3],[141,1],[141,3],[141,2],[141,2],[141,2],[141,2],[141,2],[141,2],[141,2],[141,2],[141,3],[141,4],[141,5],[141,4],[141,4],[141,4],[141,6],[141,6],[141,2],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,4],[141,3],[141,6],[141,6],[141,5],[141,5],[141,6],[141,6],[141,6],[141,6],[141,5],[141,4],[141,5],[141,5],[141,5],[141,5],[141,4],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,3],[141,2],[141,3],[141,2],[141,3],[141,2],[141,3],[141,2],[141,3],[141,3],[141,4],[141,3],[141,3],[141,3],[141,3],[141,3],[457,1],[457,3],[468,1],[468,3],[468,3],[468,5],[468,3],[468,5],[468,4],[468,3],[468,2],[468,2],[468,4],[167,1],[167,3],[309,1],[309,3],[315,1],[268,1],[268,2],[268,2],[311,1],[314,1],[470,1],[470,1],[471,1],[227,1],[227,1],[474,1],[474,2],[474,3],[474,2],[475,2],[475,3],[475,4],[472,1],[472,1],[472,1],[473,1],[473,1],[476,1],[476,1],[455,0],[455,1],[186,1],[187,1],[477,1],[477,1],[478,1],[478,1],[479,2],[480,2],[480,2],[207,2],[207,2],[211,2],[211,2],[211,2],[481,1],[483,1],[482,1],[484,1],[485,0],[485,2],[486,2],[486,2],[487,0],[488,0],[456,3],[456,4],[462,3],[462,3],[179,2],[180,3],[489,1],[490,1],[491,1],[492,1],[493,1],[494,1],[495,1],[496,1],[497,1],[498,1],[499,1],[500,1],[501,1],[502,1],[252,0],[252,1],[252,1],[252,2],[252,2],[254,1],[254,1],[254,2],[254,2],[254,2],[319,4],[320,4],[320,4],[320,5],[320,7],[503,0],[503,1],[507,3],[505,2],[505,3],[505,3],[504,0],[504,2],[506,1],[506,3],[506,2],[508,0],[508,1],[510,5],[510,5],[509,2],[509,6],[509,5],[509,5],[509,5],[509,4],[512,0],[518,0],[519,3],[522,5],[522,4],[522,3],[522,3],[522,2],[511,1],[511,1],[513,0],[513,2],[513,2],[516,2],[516,2],[514,0],[514,3],[514,3],[517,2],[517,3],[517,3],[523,1],[523,1],[463,3],[463,3],[463,3],[459,2],[459,2],[459,2],[464,2],[464,2],[464,2],[464,2],[464,2],[464,2],[460,2],[460,4],[465,2],[465,4],[465,4],[465,3],[465,4],[465,3],[465,4],[465,4],[465,3],[465,4],[465,3],[466,1],[466,1],[524,1],[524,2],[525,1],[525,2],[525,3],[525,3],[525,2],[526,4],[527,2],[527,3],[527,4],[527,4],[527,3],[527,3],[527,4],[527,2],[527,3],[527,2],[527,3],[527,3],[527,4],[527,3],[527,4],[527,4],[527,5],[527,4],[527,3],[467,1],[467,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

     parser.suggestKeywords(['TABLE', 'VIEW']);
   
break;
case 4: case 8:

     parser.suggestKeywords(['DATABASE', 'ROLE', 'SCHEMA', 'TABLE', 'VIEW']);
   
break;
case 12:

     parser.suggestSetOptions();
   
break;
case 34: case 43: case 238: case 242: case 480: case 600:

     parser.addTablePrimary($$[$0]);
   
break;
case 35: case 233:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyTables = true;
     }
   
break;
case 36:

     parser.suggestTables({ onlyTables: true });
     parser.suggestSchemas({ appendDot: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 39: case 280:

     parser.suggestKeywords(['AS']);
   
break;
case 41: case 200: case 209: case 281: case 637: case 1112:

     parser.suggestKeywords(['SELECT']);
   
break;
case 44: case 243:

     if (parser.yy.result.suggestTables) {
       parser.yy.result.suggestTables.onlyViews = true;
     }
   
break;
case 45:

     parser.suggestTables({ onlyViews: true });
     parser.suggestSchemas({ appendDot: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 55:

     parser.addNewDatabaseLocation(_$[$0-1], [{ name: $$[$0-1] }]);
   
break;
case 56: case 66:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 58:

     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 59:

     parser.addNewDatabaseLocation(_$[$0], [{ name: $$[$0] }]);
   
break;
case 60:

     parser.addNewDatabaseLocation(_$[$0-2], [{ name: $$[$0-2] }]);
   
break;
case 61:

     if (!$$[$0]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 72:

     var keywords = [];
     if (!$$[$0-2] && !$$[$0-1]) {
       keywords.push({ value: 'LIKE', weight: 1 });
     } else {
       if (!$$[$0-1]) {
         keywords.push({ value: 'PARTITIONED BY', weight: 12 });
       }
       keywords.push({ value: 'AS', weight: 1 });
     }

     if (keywords.length > 0) {
       parser.suggestKeywords(keywords);
     }
   
break;
case 73:

     parser.addNewTableLocation(_$[$0-1], $$[$0-1], $$[$0]);
     this.$ = $$[$0];
   
break;
case 78:
this.$ = [];
break;
case 80: case 597: case 617:

     parser.suggestTables();
     parser.suggestSchemas({ appendDot: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 82: case 218: case 220: case 262: case 432: case 565: case 568: case 763: case 766: case 860: case 931: case 1109:
this.$ = $$[$0-1];
break;
case 84: case 273:
this.$ = [$$[$0]];
break;
case 85:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 90: case 92:

     parser.checkForKeywords($$[$0-1]);
   
break;
case 91: case 93:

     parser.checkForKeywords($$[$0-3]);
   
break;
case 94:

     this.$ = $$[$0-2];
     this.$.type = $$[$0-1];
     var keywords = [];
     if (!$$[$0]['comment']) {
       keywords.push('COMMENT');
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 95: case 122: case 128: case 129: case 142: case 145: case 154: case 156:

     parser.suggestKeywords(parser.getColumnDataTypeKeywords());
   
break;
case 98:
this.$ = {};
break;
case 100:

     this.$ = {};
     this.$[$$[$0]] = true;
   
break;
case 101:

     $$[$0-1][$$[$0]] = true;
   
break;
case 106: case 107:
this.$ = 'null';
break;
case 108:
this.$ = 'comment';
break;
case 109:

     parser.suggestKeywords(['NULL']);
   
break;
case 127:

     parser.suggestKeywords(parser.getTypeKeywords());
   
break;
case 141: case 144:

     parser.suggestKeywords(['COMMENT']);
   
break;
case 163: case 1147:

     parser.suggestKeywords(['BY']);
   
break;
case 164:

     parser.suggestKeywords(['RANGE']);
   
break;
case 173: case 178: case 179:

     parser.suggestKeywords(['PARTITION']);
   
break;
case 185:

     parser.suggestKeywords(['VALUE', 'VALUES']);
   
break;
case 186:

     if ($$[$0].endsWithLessThanOrEqual) {
      parser.suggestKeywords(['VALUES']);
     }
   
break;
case 187: case 190: case 193:

     parser.suggestKeywords(['<', '<=']);
   
break;
case 188: case 798: case 801:

     parser.suggestKeywords(['VALUES']);
   
break;
case 191: case 194:

     parser.suggestFunctions();
   
break;
case 202:

     parser.commitLocations();
   
break;
case 204:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
     parser.suggestDatabases({ appendDot: true });
   
break;
case 205:

     if (!$$[$0-6]) {
       parser.suggestKeywords(['IF NOT EXISTS']);
     }
   
break;
case 208:

     var keywords = [{value: 'AS', weight: 1 }];
     if (!$$[$0-1]) {
       keywords.push({ value: 'COMMENT', weight: 3 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 215:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['COMMENT']);
     }
   
break;
case 219: case 221:
this.$ = $$[$0-3];
break;
case 225:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestDatabases();
   
break;
case 226:

     parser.suggestKeywords(['CASCADE']);
   
break;
case 228:

     if (!$$[$0-3]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 230: case 485:

     parser.addTablePrimary($$[$0-1]);
   
break;
case 232:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyTables: true });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 235:

     parser.addTablePrimary($$[$0-2]);
     if (!$$[$0-1]) {
       parser.suggestKeywords(['PURGE']);
     }
   
break;
case 239:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
     parser.suggestTables({ onlyViews: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 240:

     parser.addTablePrimary($$[$0]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 249:

     $$[$0-2].owner = 'insert';
     parser.addTablePrimary($$[$0-2]);
   
break;
case 250:

     parser.suggestKeywords(['INTO']);
   
break;
case 251:

     if (!$$[$0-1]) {
       parser.suggestKeywords(['TABLE']);
     }
     parser.suggestTables();
     parser.suggestSchemas({ appendDot: true });
     parser.suggestDatabases({ appendDot: true });
   
break;
case 253:

     $$[$0-1].owner = 'insert';
     parser.addTablePrimary($$[$0-1]);
     parser.suggestKeywords(['VALUES']);
   
break;
case 261: case 434:
this.$ = $$[$0-2];
break;
case 263:

     parser.addCommonTableExpressions($$[$0-3]);
   
break;
case 264: case 265: case 276:

     parser.addCommonTableExpressions($$[$0-2]);
   
break;
case 271: case 287: case 311: case 387: case 391: case 429: case 439: case 466: case 616: case 1032: case 1034: case 1091: case 1146: case 1221:
this.$ = $$[$0];
break;
case 274:
this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 278:

     parser.addCommonTableExpressions($$[$0-4]);
   
break;
case 279:

     parser.addCteAliasLocation(_$[$0-4], $$[$0-4]);
     $$[$0-1].alias = $$[$0-4];
     this.$ = $$[$0-1];
   
break;
case 283:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 284: case 292:

       parser.suggestTables();
       parser.suggestSchemas({ appendDot: true });
       parser.suggestDatabases({ appendDot: true });
   
break;
case 295:

     this.$ = { valueExpression: $$[$0] };
   
break;
case 296: case 398:

     parser.suggestSelectListAliases();
   
break;
case 297:

     parser.valueExpressionSuggest();
     parser.suggestSelectListAliases();
     parser.suggestGroupBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 298:

     parser.suggestKeywords(['BY']);
     parser.suggestGroupBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 308: case 611: case 823: case 826: case 827: case 857: case 858: case 881: case 884:

     parser.suggestColumns();
   
break;
case 313: case 314: case 320: case 321: case 856: case 1105: case 1148:

     parser.valueExpressionSuggest();
   
break;
case 325:

     parser.valueExpressionSuggest();
     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 326:

     parser.suggestAggregateFunctions();
     parser.suggestSelectListAliases(true);
   
break;
case 330:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-2];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
        parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 331:

     if ($$[$0] && $$[$0].valueExpression) {
       this.$ = $$[$0].valueExpression;
     } else {
       this.$ = {};
     }
     this.$.joinType = $$[$0-3];
     if ($$[$0].noJoinCondition) {
       this.$.suggestJoinConditions = { prependOn: true, tablePrimaries: parser.yy.latestTablePrimaries.concat() }
     }
     if ($$[$0].suggestKeywords) {
       this.$.suggestKeywords = $$[$0].suggestKeywords;
     }
     if (parser.yy.latestTablePrimaries.length > 0) {
       parser.yy.latestTablePrimaries[parser.yy.latestTablePrimaries.length - 1].join = true;
     }
   
break;
case 332:
this.$ = { joinType: $$[$0] };
break;
case 333:
this.$ = { joinType: $$[$0-1] };
break;
case 334:

     if ($$[$0-2].suggestKeywords) {
       parser.suggestKeywords($$[$0-2].suggestKeywords);
     }
   
break;
case 335:

     if ($$[$0].suggestKeywords) {
       parser.suggestKeywords($$[$0].suggestKeywords);
     }
   
break;
case 338:

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         parser.suggestJoins({
           prependJoin: false,
           joinType: $$[$0-2],
           tables: tables
         })
       }
     }
     parser.suggestTables();
     parser.suggestSchemas({
       appendDot: true
     });
     parser.suggestDatabases({
       appendDot: true
     });
   
break;
case 343:
this.$ = 'CROSS JOIN';
break;
case 344:
this.$ = 'FULL JOIN';
break;
case 345:
this.$ = 'FULL OUTER JOIN';
break;
case 346:
this.$ = 'INNER JOIN';
break;
case 347:
this.$ = 'JOIN';
break;
case 348:
this.$ = 'LEFT INNER JOIN';
break;
case 349:
this.$ = 'LEFT JOIN';
break;
case 350:
this.$ = 'LEFT OUTER JOIN';
break;
case 351:
this.$ = 'LEFT SEMI JOIN';
break;
case 352:
this.$ = 'OUTER JOIN';
break;
case 353: case 355:
this.$ = 'RIGHT OUTER JOIN';
break;
case 354:
this.$ = 'RIGHT JOIN';
break;
case 356:
this.$ = 'RIGHT SEMI JOIN';
break;
case 357:
this.$ = 'SEMI JOIN';
break;
case 358: case 360: case 361: case 363: case 364: case 365: case 366: case 368: case 369: case 370: case 371:
this.$ = { suggestKeywords: ['JOIN'] };
break;
case 359: case 362: case 367:
this.$ = { suggestKeywords: ['OUTER'] };
break;
case 372:
this.$ = { noJoinCondition: true, suggestKeywords: ['ON'] };
break;
case 373:
this.$ = { valueExpression: $$[$0] };
break;
case 377:

     parser.valueExpressionSuggest();
     parser.suggestJoinConditions({ prependOn: false });
   
break;
case 384:

     parser.suggestKeywords([{ value: '10', weight: 10000 }, { value: '100', weight: 10000 }, { value: '1000', weight: 10000 }, { value: '5000', weight: 10000 }, { value: '10000', weight: 10000 }])
   
break;
case 388:

     if ($$[$0].emptyOrderBy) {
       parser.suggestOrderBys({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 389:

     parser.suggestKeywords(['BY']);
     parser.suggestOrderBys({ prefix: 'BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 393:

     this.$ = { emptyOrderBy: false }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 394: case 395: case 396:
this.$ = { emptyOrderBy: false };
break;
case 397:
this.$ = parser.mergeSuggestKeywords($$[$0]);
break;
case 399:

     this.$ = { emptyOrderBy: true }
     parser.valueExpressionSuggest();
     parser.suggestAnalyticFunctions();
     parser.suggestSelectListAliases();
   
break;
case 400:
this.$ = { suggestKeywords: ['ASC', 'DESC'] };;
break;
case 403:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 404:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 405:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-1]) {
         keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
       }
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestSchemas) {
       parser.suggestSchemas({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions && (!$$[$0-1] || $$[$0-1] === 'ALL')) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 406:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-1] || $$[$0-1] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-1]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestSchemas({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 407:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
   
break;
case 408:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.selectListNoTableSuggest($$[$0-1], $$[$0-2]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 409:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2] || $$[$0-2] === 'ALL') {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
     if (!$$[$0-2]) {
       keywords = keywords.concat(parser.SELECT_FIRST_OPTIONAL_KEYWORDS);
     }
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestSchemas({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 410:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 411:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]), _$[$0-3]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 412:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestSchemas({ prependFrom: true, appendDot: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 416: case 417:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 418:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-3], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-2].limitClausePreceding || _$[$0-3], $$[$0-2].limitClauseLocation);

     if ($$[$0-3]) {
       if (typeof $$[$0-3].tableReferenceList.hasJoinCondition !== 'undefined' && !$$[$0-3].tableReferenceList.hasJoinCondition) {
         keywords.push({ value: 'ON', weight: 3 });
       }
       if ($$[$0-3].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-3].suggestKeywords, 3);
       }
       if ($$[$0-3].tableReferenceList.suggestJoinConditions) {
         parser.suggestJoinConditions($$[$0-3].tableReferenceList.suggestJoinConditions);
       }
       if ($$[$0-3].tableReferenceList.suggestJoins) {
         parser.suggestJoins($$[$0-3].tableReferenceList.suggestJoins);
       }
       if ($$[$0-3].tableReferenceList.suggestKeywords) {
         keywords = keywords.concat(parser.createWeightedKeywords($$[$0-3].tableReferenceList.suggestKeywords, 3));
       }

       // Lower the weights for 'TABLESAMPLE'
       keywords.forEach(function (keyword) {
         if (keyword.value === 'TABLESAMPLE') {
           keyword.weight = 1.1;
         }
       });

       if ($$[$0-3].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-3].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-3].tableReferenceList);
         }
       }
     }

     if ($$[$0-1].empty && $$[$0] && $$[$0].joinType.toUpperCase() === 'JOIN') {
       keywords = keywords.concat(['FULL', 'FULL OUTER', 'INNER', 'LEFT', 'LEFT OUTER', 'RIGHT', 'RIGHT OUTER']);
       parser.suggestKeywords(keywords);
       return;
     }

     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].suggestFilters) {
       parser.suggestFilters($$[$0-1].suggestFilters);
     }
     if ($$[$0-1].suggestGroupBys) {
       parser.suggestGroupBys($$[$0-1].suggestGroupBys);
     }
     if ($$[$0-1].suggestOrderBys) {
       parser.suggestOrderBys($$[$0-1].suggestOrderBys);
     }

     if ($$[$0-1].empty) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }

     keywords = keywords.concat([
       { value: 'FULL JOIN', weight: 1 },
       { value: 'FULL OUTER JOIN', weight: 1 },
       { value: 'INNER JOIN', weight: 1 },
       { value: 'JOIN', weight: 1 },
       { value: 'LEFT JOIN', weight: 1 },
       { value: 'LEFT OUTER JOIN', weight: 1 },
       { value: 'RIGHT JOIN', weight: 1 },
       { value: 'RIGHT OUTER JOIN', weight: 1 }
     ]);
     parser.suggestKeywords(keywords);
  
break;
case 419:

     // A couple of things are going on here:
     // - If there are no SelectConditions (WHERE, GROUP BY, etc.) we should suggest complete join options
     // - If there's an OptionalJoin at the end, i.e. 'SELECT * FROM foo | JOIN ...' we should suggest
     //   different join types
     // - The FromClause could end with a valueExpression, in which case we should suggest keywords like '='
     //   or 'AND' based on type

     if (!$$[$0-1]) {
       parser.addClauseLocation('whereClause', _$[$0-2]);
       parser.addClauseLocation('limitClause', _$[$0-2]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0-1].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0-1].limitClausePreceding || _$[$0-2], $$[$0-1].limitClauseLocation);
     var keywords = [];

     if ($$[$0-1].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0-1].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0-1]);
     }

     if ($$[$0-1].suggestKeywords && $$[$0-1].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 2));
     }

     if ($$[$0-1].cursorAtEnd) {
       keywords.push({ value: 'UNION', weight: 2.11 });
     }
     parser.suggestKeywords(keywords);
   
break;
case 420:
this.$ = [ $$[$0] ];
break;
case 421:

     $$[$0-2].push($$[$0]);
   
break;
case 423: case 424:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 426:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 427:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 428:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestSchemas: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 430: case 431: case 433:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 435:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push($$[$0-1].function && $$[$0-1].types && $$[$0-1].types.length && $$[$0-1].types[0] === 'UDFREF' ? { name: $$[$0].alias, udfRef: $$[$0-1].function, types: $$[$0-1].types } : { name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 436:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 437:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 438:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 440:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'WHERE', weight: 7 }, { value: 'GROUP BY', weight: 6 }, { value: 'HAVING', weight: 5 }, { value: 'ORDER BY', weight: 4 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true, true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0-4] ? _$[$0-4] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0-4] && !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0]) {
       this.$.suggestGroupBys = { prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
     if (!$$[$0-1] && !$$[$0]) {
       this.$.suggestOrderBys = { prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 441:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 442:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'group by';
     }
   
break;
case 444:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'order by';
     }
   
break;
case 446:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'GROUP BY', weight: 8 }, { value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true, true]);
     if ($$[$0-5].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-5].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-5], keywords);
     this.$.cursorAtEnd = !$$[$0-3] && !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if ($$[$0-5].columnReference) {
       this.$.columnReference = $$[$0-5].columnReference;
     }
     if (!$$[$0-3]) {
       parser.suggestGroupBys({ prefix: 'GROUP BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     if (!$$[$0-3] && !$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 447:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-2], $$[$0-1], $$[$0]],
       [{ value: 'HAVING', weight: 7 }, { value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true, true]);
     if ($$[$0-4].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-4].suggestKeywords, 8));
     }
     if ($$[$0-4].valueExpression) {
       this.$ = parser.getValueExpressionKeywords($$[$0-4].valueExpression, keywords);
       if ($$[$0-4].valueExpression.columnReference) {
         this.$.columnReference = $$[$0-4].valueExpression.columnReference;
       }
     } else {
       this.$ = { suggestKeywords: keywords };
     }
     this.$.cursorAtEnd = !$$[$0-2] && !$$[$0-1] && !$$[$0];
     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-2], _$[$0-2], $$[$0-4], _$[$0-4]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 448:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0-1], $$[$0]],
       [{ value: 'ORDER BY', weight: 5 }, { value: 'LIMIT', weight: 3 }],
       [true, true]);
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0-1] && !$$[$0] };
     if (!$$[$0-1]) {
       parser.suggestOrderBys({ prefix: 'ORDER BY', tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-1], _$[$0-1], $$[$0-3], _$[$0-3]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 449:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'LIMIT', weight: 3 }],
       [true]);
     if ($$[$0-2].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-2].suggestKeywords, 4));
     }
     this.$ = { suggestKeywords: keywords, cursorAtEnd: !$$[$0] };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2]);
     this.$.limitClauseLocation = $$[$0] ? _$[$0] : undefined;
   
break;
case 450:

     this.$ = { suggestKeywords: [], cursorAtEnd: true };
     this.$.whereClauseLocation = $$[$0-5] ? _$[$0-5] : undefined;
     this.$.limitClausePreceding = parser.firstDefined($$[$0-2], _$[$0-2], $$[$0-3], _$[$0-3], $$[$0-4], _$[$0-4], $$[$0-5], _$[$0-5]);
     this.$.limitClauseLocation = _$[$0-1];
   
break;
case 461:

     parser.suggestKeywords(['ALL', 'DISTINCT', 'SELECT']);
   
break;
case 462:

     parser.suggestKeywords(['ALL', 'DISTINCT']);
   
break;
case 467:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 468:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 481:

     parser.suggestKeywords(['TABLE']);
   
break;
case 482:

     parser.suggestTables();
     parser.suggestSchemas({ appendDot: true });
     parser.suggestDatabases({ appendDot: true });
     if (!$$[$0-1]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 486:

     parser.addTablePrimary($$[$0-1]);
     if (!$$[$0-2]) {
       parser.suggestKeywords(['IF EXISTS']);
     }
   
break;
case 488:

     if (!$$[$0]) {
       $$[$0-1].suggestKeywords = ['OVER'];
     }
   
break;
case 495:

     parser.suggestKeywords(['OVER']);
   
break;
case 504:

     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 505: case 523:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 506:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       if ($$[$0-4].toLowerCase() === 'group_concat') {
         keywords.push('ALL');
       } else {
         keywords.push('DISTINCT');
       }
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 507: case 521:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 508:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords(true);
       if (!$$[$0-2]) {
         if ($$[$0-4].toLowerCase() === 'group_concat') {
           keywords.push('ALL');
         } else {
           keywords.push('DISTINCT');
         }
       }
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
       parser.suggestKeywords(keywords);
     }
     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], $$[$0-1].activePosition);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 517:

     parser.addFunctionArgumentLocations($$[$0-3], [{
       expression: { text: $$[$0-1] },
       location: _$[$0-1]
     }]);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] }
   
break;
case 518: case 524:

     this.$ = { function: $$[$0-2], types: ['UDFREF'] }
   
break;
case 519:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-1].expressions);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] }
   
break;
case 520:

     parser.valueExpressionSuggest();
     var keywords = parser.getSelectListKeywords();
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
       if (parser.yy.result.suggestKeywords) {
         keywords = parser.yy.result.suggestKeywords.concat(keywords);
       }
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 522:

     if ($$[$0-1].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       if (!$$[$0-2]) {
         keywords.push('DISTINCT');
       }
       parser.suggestKeywords(keywords);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 525:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     var keywords = parser.getSelectListKeywords(true);
     if (!$$[$0-2]) {
       keywords.push('DISTINCT');
     }
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 526:

     parser.suggestValueExpressionKeywords($$[$0-2]);
     this.$ = { function: $$[$0-5], types: ['UDFREF'] };
   
break;
case 527:

     if (parser.yy.result.suggestFunctions && !parser.yy.result.suggestFunctions.types) {
       parser.applyArgumentTypesToSuggestions($$[$0-4], 1);
     }
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 528:

    this.$ = { function: $$[$0-2], types: ['UDFREF'] }
  
break;
case 529:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     this.$ = {
       function: $$[$0-3],
       expression: $$[$0-1].expressions[$$[$0-1].expressions.length - 1].expression,
       types: ['UDFREF']
     }
   
break;
case 530:

     parser.valueExpressionSuggest();
     parser.applyArgumentTypesToSuggestions($$[$0-3], 1);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 531:

     parser.addFunctionArgumentLocations($$[$0-4], $$[$0-2].expressions);
     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = { function: $$[$0-4], types: ['UDFREF'] };
   
break;
case 532:

     parser.addFunctionArgumentLocations($$[$0-3], $$[$0-1].expressions);
     parser.applyArgumentTypesToSuggestions($$[$0-3], $$[$0-1].activePosition);
     this.$ = { function: $$[$0-3], types: ['UDFREF'] };
   
break;
case 537:

     var expression = $$[$0-3];
     parser.extractExpressionText(expression, $$[$0-3], $$[$0-2], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-5], [{
       expression: expression,
       location: {
         first_line: _$[$0-3].first_line,
         last_line: _$[$0-1].last_line,
         first_column: _$[$0-3].first_column,
         last_column: _$[$0-1].last_column
       }
     }]);
     this.$ = { types: [ $$[$0-1].toUpperCase() ] }
   
break;
case 538: case 543: case 544: case 1038:
this.$ = { types: [ 'T' ] };
break;
case 539:

     parser.valueExpressionSuggest();
     this.$ = { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 540: case 541:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ] };
   
break;
case 542:
this.$ = { types: [ $$[$0-1].toUpperCase() ] };
break;
case 545:

     parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'AS', weight: 2 }]);
     this.$ =  { types: [ $$[$0-1].toUpperCase() ] };
   
break;
case 546:

     parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'AS', weight: 2 }]);
     this.$ = { types: [ 'T' ] };
   
break;
case 547: case 548:

     parser.suggestKeywords(parser.getTypeKeywords());
     this.$ = { types: [ 'T' ] };
   
break;
case 549:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     if ($$[$0-1].lastLoc && $$[$0-1].lastLoc.location) {
       $$[$0-1].lastLoc.type = 'function';
       $$[$0-1].lastLoc.function = fn;
       $$[$0-1].lastLoc.location = {
         first_line: $$[$0-1].lastLoc.location.first_line,
         last_line: $$[$0-1].lastLoc.location.last_line,
         first_column: $$[$0-1].lastLoc.location.first_column,
         last_column: $$[$0-1].lastLoc.location.last_column - 1
       }
       if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
          $$[$0-1].firstLoc.type = 'database';
       } else {
         delete $$[$0-1].lastLoc.identifierChain;
       }
     }
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: fn, expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: fn, types: ['UDFREF'] }
     }
   
break;
case 550:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expressions && $$[$0].expressions.length) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
    } else {
      this.$ = { function: $$[$0-1], types: ['UDFREF'] }
    }
  
break;
case 553:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 554:
this.$ = { types: [ 'NULL' ], text: $$[$0] };
break;
case 555:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     parser.addFunctionArgumentLocations(fn, $$[$0].expressions, $$[$0-1].chain);
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].activePosition);
     }
     this.$ = { function: fn, types: ['UDFREF'] };
   
break;
case 556: case 562: case 563:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].activePosition) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].activePosition);
     }
     this.$ = { function: $$[$0-1], types: ['UDFREF'] };
   
break;
case 559:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 560: case 561:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     parser.addFunctionArgumentLocations($$[$0-1], $$[$0].expressions);
     if ($$[$0].expressions && $$[$0].expressions.length) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expressions[$$[$0].expressions.length - 1].expression, types: ['UDFREF'] }
     } else {
       this.$ = { function: $$[$0-1], types: ['UDFREF'] }
     }
   
break;
case 566:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }]
     }
   
break;
case 567:

     parser.suggestValueExpressionKeywords($$[$0-2].expressions[$$[$0-2].expressions.length - 1].expression);
     this.$ = $$[$0-3];
   
break;
case 569: case 571:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0], location: _$[$0] }]
     }
   
break;
case 570: case 572:

     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: $$[$0], location: _$[$0] }])
     }
   
break;
case 573:

     this.$ = {
       activePosition: 1,
       expressions: [{ expression: $$[$0-2], location: _$[$0-2] }].concat($$[$0].expressions)
     }
   
break;
case 574:

     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: $$[$0-2], location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 575:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-2].activePosition + 1,
       expressions: $$[$0-2].expressions.concat([{ expression: { text: '' }, location: _$[$0] }])
     }
   
break;
case 576:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: $$[$0-4].activePosition + 1,
       expressions: $$[$0-4].expressions.concat([{ expression: { text: '' }, location: _$[$0-2] }]).concat($$[$0].expressions)
     }
   
break;
case 577:

     parser.suggestValueExpressionKeywords($$[$0-3].expressions[$$[$0-3].expressions.length - 1].expression);
     this.$ = {
       activePosition: $$[$0-3].activePosition,
       expressions: $$[$0-3].expressions.concat($$[$0].expressions)
     }
   
break;
case 578:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 579:

     parser.valueExpressionSuggest();
     this.$ = {
       cursorAtStart : true,
       activePosition: 1,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 580:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-1] }, { expression: { text: '' }, location: _$[$0] }]
     };
   
break;
case 581:

     parser.valueExpressionSuggest();
     this.$ = {
       activePosition: 2,
       expressions: [{ expression: { text: '' }, location: _$[$0-3] }, { expression: { text: '' }, location: _$[$0-2] }].concat($$[$0].expressions)
     };
   
break;
case 593:

     parser.suggestKeywords([ 'WHERE' ]);
   
break;
case 594:

     parser.suggestKeywords([ 'SET' ]);
   
break;
case 610:

     parser.suggestKeywords([ '=' ]);
   
break;
case 619:

     if (! parser.yy.cursorFound) {
       parser.yy.result.useDatabase = $$[$0];
     }
   
break;
case 620:

     parser.suggestDatabases();
   
break;
case 621:

     parser.yy.result.useDatabase = $$[$0-1];
     if ($$[$0-1] === atob('aHVlX2F1dG9jb21wbGV0ZV9wYXJzZXI=')) {
       console.warn(atob('Q2xvdWRlcmEgMjAxNi0yMDIyIC0gSm9oYW4gQWhsZW4='));
     }
   
break;
case 623: case 624:

     return parser.yy.result;
   
break;
case 625:

     parser.prepareNewStatement();
   
break;
case 627: case 629: case 631:

     parser.addStatementLocation(_$[$0]);
   
break;
case 630: case 632:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 636:

     parser.suggestDdlAndDmlKeywords();
   
break;
case 764: case 767: case 861:
this.$ = '';
break;
case 780: case 784:

     parser.yy.correlatedSubQuery = false;
   
break;
case 782: case 787:

     parser.suggestKeywords(['EXISTS']);
   
break;
case 786:

     parser.suggestKeywords(['NOT EXISTS']);
   
break;
case 797: case 799: case 800: case 802:

     parser.suggestKeywords(['<', '<=', '<>', '=', '>', '>=']);
   
break;
case 831: case 862:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 832: case 863:

     parser.addSchemaLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 833: case 864:

     parser.addDatabaseLocation(_$[$0-4], [ { name: $$[$0-4] } ]);
     parser.addSchemaLocation(_$[$0-4], [ { name: $$[$0-4] }, { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0-2], [ { name: $$[$0-4] }, { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-4] }, { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 834:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
     parser.suggestSchemas({ appendDot: true });
   
break;
case 835:

     parser.suggestSchemas();
     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 836:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-4] }] };
   
break;
case 837:

     parser.suggestSchemas({ appendDot: true, databaseName: $$[$0-2] });
     parser.suggestTablesOrColumns([{ name: $$[$0-2] }]);
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 838:

     parser.suggestSchemas({ appendDot: true, databaseName: $$[$0-4] });
     this.$ = { identifierChain: [{ name: $$[$0-4] }] };
   
break;
case 839:

     parser.suggestTablesOrColumns([{ name: $$[$0-4] }, { name: $$[$0-2] }]);
     this.$ = { identifierChain: [{ name: $$[$0-4] }, { name: $$[$0-2]}] };
   
break;
case 840:
this.$ = [{ name: $$[$0] }];
break;
case 841:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 842:
this.$ = [{ name: $$[$0-4] }, { name: $$[$0-3] }, { name: $$[$0-2] }];
break;
case 843:

     parser.suggestDatabases({ appendDot: true });
     parser.suggestSchemas({ appendDot: true });
   
break;
case 844:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 847:

     parser.suggestDatabases();
     parser.suggestSchemas();
   
break;
case 865:

     parser.suggestTables();
     parser.suggestSchemas({ prependDot: true });
     parser.suggestDatabases({ prependDot: true });
   
break;
case 866:

     parser.suggestTablesOrColumns([{ name: $$[$0-2] }]);
   
break;
case 867:

     parser.suggestTablesOrColumns([{ name: $$[$0-4] }, { name: $$[$0-2] }]);
   
break;
case 869:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 872:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 873: case 1057:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 875:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 876:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 877:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 878:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 879:
this.$ = [ $$[$0].identifier ];
break;
case 880:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 882:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 883:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 885:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };
break;
case 922: case 923:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 924: case 949:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 925:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 926: case 927: case 928:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 929:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 930:

     this.$ = { types: [ 'BOOLEAN' ] };
     // clear correlated flag after completed sub-query (set by lexer)
     parser.yy.correlatedSubQuery = false;
   
break;
case 932: case 933: case 934: case 935:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 936: case 937: case 938: case 939: case 970: case 1028: case 1029:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 940:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 941:

     this.$ = { types: [ 'BOOLEAN' ] }
     parser.extractExpressionText(this.$, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 942: case 943:

     // verifyType($$[$0-2], 'BOOLEAN');
     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 944: case 945: case 946:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 947:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 948:

     this.$ = { types: [ 'BOOLEAN' ] };
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 950:

     this.$ = $$[$0];
     parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 951:

    parser.extractExpressionText(this.$, $$[$0-2], $$[$0-1], $$[$0]);
    this.$ = { types: [ $$[$0].toUpperCase() ] }
  
break;
case 953:

     parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 954: case 956:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 955:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 957:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 958:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 959:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 960:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 961:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 962:

     parser.suggestKeywords(['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 963:

     parser.suggestKeywords(['FALSE', 'NULL', 'TRUE']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 964:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 965: case 966: case 967:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 968:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-3] ? 'IS NOT DISTINCT FROM' : 'IS DISTINCT FROM');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 969:

     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 971:

     this.$ = $$[$0-1];
   
break;
case 972:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 973:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 974: case 975: case 976:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 977: case 978: case 979: case 980:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0]);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 981: case 983:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 982:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 984:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 985: case 986: case 987: case 988:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 989:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-3]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 990:

     if ($$[$0].inValueEdit) {
       parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     if ($$[$0].cursorAtStart) {
       parser.suggestKeywords(['SELECT']);
     }
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 991: case 992:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
break;
case 993: case 994:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
break;
case 995:

     if ($$[$0-2].types[0] === $$[$0].types[0] && !$$[$0-5].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-5].suggestFilters };
   
break;
case 996:

     if ($$[$0-5].types[0] === $$[$0].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 997:

     if ($$[$0-5].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-5]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 998:

     parser.valueExpressionSuggest($$[$0-5], $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 999: case 1005:

     parser.suggestValueExpressionKeywords($$[$0-1], ['AND']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 1000:

     parser.valueExpressionSuggest($$[$0-3], $$[$0-2] + ' ' + $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1001:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-4].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-4].suggestFilters };
   
break;
case 1002:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
   
break;
case 1003:

     if ($$[$0-4].types[0] === $$[$0-2].types[0] && !$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-4])
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1004:

     parser.valueExpressionSuggest($$[$0-4], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-4]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 1006:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1007: case 1009: case 1011: case 1013:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 1008: case 1012:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1010: case 1014:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 1015: case 1016:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1017: case 1018: case 1019:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 1020: case 1021: case 1022:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions({ types: ['NUMBER'] });
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 1023: case 1024: case 1025:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions({ types: ['NUMBER'] });
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 1026:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1027:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1030:

     parser.valueExpressionSuggest(undefined, $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1031:

     parser.valueExpressionSuggest(undefined, $$[$0-1] + ' ' + $$[$0]);
     parser.applyTypeToSuggestions({ types: [ 'STRING' ] });
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 1033:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1035:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1036:

      this.$ = $$[$0];
      this.$.suggestFilters = $$[$0-1].suggestFilters;
    
break;
case 1037:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1039:

    parser.suggestKeywords(parser.getTypeKeywords());
    this.$ = { types: [ 'T' ] };
  
break;
case 1040:

    parser.addColRefIfExists($$[$0-2]);
    this.$ = { types: [ $$[$0].toUpperCase() ] }
  
break;
case 1041: case 1043:

     $$[$0].position = 1;
   
break;
case 1042:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 1044:

     $$[$0-2].position += 1;
   
break;
case 1045:

     $$[$0-2].position = 1;
   
break;
case 1046:

     $$[$0-4].position += 1;
   
break;
case 1047:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 1048:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 1049:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 1050: case 1051:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 1052: case 1053:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 1056:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 1063:

     parser.suggestValues($$[$0]);
   
break;
case 1064:
this.$ = { types: [ 'NUMBER' ], text: $$[$0] };
break;
case 1070: case 1072: case 1073:
this.$ = $$[$0-1] + $$[$0];
break;
case 1071: case 1074:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1075:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 1076:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: "'" + $$[$0] + "'" }
     } else {
       this.$ = { types: [ 'STRING' ] }
     }
   
break;
case 1077:

     if (/\$\{[^}]*\}/.test($$[$0])) {
       parser.addVariableLocation(_$[$0], $$[$0]);
       this.$ = { types: [ 'STRING' ], columnReference: [{ name: $$[$0] }], text: '"' + $$[$0] + '"' }
     } else {
       this.$ = { types: [ 'STRING' ], text: '"' + $$[$0] + '"' }
     }
   
break;
case 1078:
this.$ = { types: [ 'BOOLEAN' ], text: $$[$0] };
break;
case 1079:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1080:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 1087:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)

       if (tables.length > 0) {
         this.$.suggestJoins = {
           prependJoin: true,
           tables: tables
         };
       }
      }
   
break;
case 1094:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     } else if ($$[$0].suggestKeywords) {
       keywords = $$[$0].suggestKeywords;
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1095:

     this.$ = {
       primary: $$[$0-1]
     };

     if ($$[$0]) {
       this.$.primary.alias = $$[$0].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }

     var keywords = [];
     if (!$$[$0]) {
       keywords = ['AS'];
     }
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 1096:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$0].location, $$[$0].alias, $$[$0-1].identifierChain);
     }
   
break;
case 1097:

     if ($$[$0]) {
       parser.addTablePrimary({ subQueryAlias: $$[$0].alias });
       parser.addSubqueryAliasLocation($$[$0].location, $$[$0].alias);
     }
   
break;
case 1107:

     parser.pushQueryState();
   
break;
case 1108:

     parser.popQueryState();
   
break;
case 1110:

     if ($$[$0-1]) {
       $$[$0-2].alias = $$[$0-1].alias;
       parser.addTablePrimary({ subQueryAlias: $$[$0-1].alias });
       parser.addSubqueryAliasLocation($$[$0-1].location, $$[$0-1].alias, $$[$0-2].identifierChain);
     }
     this.$ = $$[$0-2];
   
break;
case 1113:

     var subQuery = parser.getSubQuery($$[$0]);
     subQuery.columns.forEach(function (column) {
       parser.expandIdentifierChain({ wrapper: column });
       delete column.linked;
     });
     parser.popQueryState(subQuery);
     this.$ = subQuery;
   
break;
case 1130: case 1131: case 1132: case 1133:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 1140: case 1141:

     if (parser.yy.result.suggestFunctions) {
       parser.suggestAggregateFunctions();
     }
   
break;
case 1142:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords([{ value: 'PARTITION BY', weight: 2 }, { value: 'ORDER BY', weight: 1 }]);
     } else if (!$$[$0-2]) {
       parser.suggestKeywords(['PARTITION BY']);
     }
   
break;
case 1143:

      if (!$$[$0-1]) {
        parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ORDER BY', weight: 2 }]);
      } else {
        parser.suggestValueExpressionKeywords($$[$0-3]);
      }
    
break;
case 1152:

      // Only allowed in last order by
      delete parser.yy.result.suggestAnalyticFunctions;
    
break;
case 1153:

      var keywords = [];
      if ($$[$0-2].suggestKeywords) {
        keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 2);
      }
      if (!$$[$0]) {
        keywords = keywords.concat([{ value: 'RANGE BETWEEN', weight: 1 }, { value: 'ROWS BETWEEN', weight: 1 }]);
      }
      parser.suggestKeywords(keywords);
    
break;
case 1159:

     parser.suggestKeywords(['BETWEEN']);
   
break;
case 1160:

     if (!$$[$0-2] && !$$[$0-1]) {
       parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED PRECEDING']);
     } else if (!$$[$0-1]) {
       parser.suggestKeywords(['AND']);
     }
   
break;
case 1165:

    lexer.popState();
  
break;
case 1166:

    lexer.begin('hdfs');
  
break;
case 1168:

      parser.suggestHdfs({ path: $$[$0-3] });
    
break;
case 1169:

     parser.suggestHdfs({ path: $$[$0-2] });
   
break;
case 1170:

      parser.suggestHdfs({ path: $$[$0-1] });
    
break;
case 1171:

     parser.suggestHdfs({ path: '' });
   
break;
case 1172:

      parser.suggestHdfs({ path: '' });
    
break;
case 1178:

     parser.suggestKeywords(['PRECEDING']);
   
break;
case 1179: case 1184:

     parser.suggestKeywords(['ROW']);
   
break;
case 1183:

     parser.suggestKeywords(['CURRENT ROW', 'UNBOUNDED FOLLOWING']);
   
break;
case 1185:

     parser.suggestKeywords(['FOLLOWING']);
   
break;
case 1189:
this.$ = { inValueEdit: true };
break;
case 1190:
this.$ = { inValueEdit: true, cursorAtStart: true };
break;
case 1191: case 1192: case 1193:

     this.$ = { suggestKeywords: ['NOT'] }
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1197: case 1198: case 1199:

     parser.suggestFunctions({ types: [ 'STRING' ] });
     parser.suggestColumns({ types: [ 'STRING' ] });
     this.$ = { types: ['BOOLEAN'] }
   
break;
case 1200:

     this.$ = parser.findCaseType($$[$0-1])
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1201:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1202:
this.$ = parser.findCaseType($$[$0-1]);
break;
case 1203:

     parser.suggestValueExpressionKeywords($$[$0-1], ['END']);
     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1204:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1205:
this.$ = parser.findCaseType($$[$0-2]);
break;
case 1206:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-3], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1207:

     if ($$[$0].toLowerCase() !== 'end') {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'END', weight: 3 }, { value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     } else {
       parser.suggestValueExpressionKeywords($$[$0-2], [{ value: 'ELSE', weight: 2 }, { value: 'WHEN', weight: 1 }]);
     }
     this.$ = parser.findCaseType($$[$0-2]);
   
break;
case 1208:

     $$[$0-3].caseTypes.push($$[$0-1]);
     this.$ = parser.findCaseType($$[$0-3]);
     this.$.suggestFilters = $$[$0-1].suggestFilters
   
break;
case 1209:

     parser.valueExpressionSuggest();
     this.$ = parser.findCaseType($$[$0-3]);
   
break;
case 1210:

     parser.valueExpressionSuggest();
     this.$ = { types: [ 'T' ], typeSet: true };
   
break;
case 1211:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = $$[$0-1];
   
break;
case 1212:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { types: [ 'T' ] };
   
break;
case 1215:

     this.$ = { caseTypes: [ $$[$0] ], lastType: $$[$0] }
     parser.extractExpressionText(this.$, $$[$0]);
   
break;
case 1216:

     $$[$0-1].caseTypes.push($$[$0]);
     this.$ = { caseTypes: $$[$0-1].caseTypes, lastType: $$[$0] };
     parser.extractExpressionText(this.$, $$[$0-1], $$[$0]);
   
break;
case 1220:

     parser.suggestValueExpressionKeywords($$[$0-2], ['WHEN']);
   
break;
case 1222:

     this.$ = $$[$0]
     parser.extractExpressionText(this.$, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
   
break;
case 1223:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0].suggestFilters };
break;
case 1224:
this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: $$[$0-1].suggestFilters };
break;
case 1225:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0-2].suggestFilters };
break;
case 1226: case 1227:
this.$ = { caseTypes: [$$[$0]], suggestFilters: $$[$0].suggestFilters };
break;
case 1228:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1229:

     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [$$[$0]] };
   
break;
case 1230:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['WHEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1231:

      parser.valueExpressionSuggest();
      parser.suggestKeywords(['WHEN']);
      this.$ = { caseTypes: [{ types: ['T'] }] };
    
break;
case 1232: case 1234:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1233:

     parser.valueExpressionSuggest();
     parser.suggestKeywords(['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }], suggestFilters: true };
   
break;
case 1235:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [$$[$0]], suggestFilters: true };
   
break;
case 1236:

     parser.suggestValueExpressionKeywords($$[$0-1], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1237:

     parser.suggestValueExpressionKeywords($$[$0-2], ['THEN']);
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
case 1238: case 1239: case 1240: case 1241:

     parser.valueExpressionSuggest();
     this.$ = { caseTypes: [{ types: ['T'] }] };
   
break;
}
},
table: [o($V0,$V1,{338:1,263:2}),{1:[3]},o($V2,$V3,{339:3,343:4,19:5,155:6,44:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,34:19,35:20,156:21,157:22,168:23,169:24,36:25,42:26,158:31,4:$V4,8:$V5,12:$V6,16:$V7,162:$V8,174:$V9,241:$Va,271:$Vb,321:$Vc,337:$Vd}),{340:[1,37],344:[1,38]},o($V2,[2,627]),o($V2,[2,633]),o($V2,[2,634]),o($V2,[2,635]),o($V2,[2,15]),o($V2,[2,16]),o($V2,[2,17]),o($V2,[2,18]),o($V2,[2,19]),o($V2,[2,20]),o($V2,[2,21]),o($V2,[2,22]),o($V2,[2,23]),o($V2,[2,24]),{30:[1,39],31:40,59:41,63:$Ve,113:$Vf,228:$Vg,347:44,348:$Vh,349:$Vi},o($V2,[2,27]),o($V2,[2,28]),o($V2,[2,244]),o($V2,[2,245]),{79:[1,49],169:48,241:$Va},o($Vj,$Vk,{170:50,258:51,260:52,262:$Vl}),{37:54,125:[1,55]},{43:[1,56]},{39:[1,59],47:[1,60],57:57,63:[1,58],365:$Vm,383:$Vn},{39:[1,65],47:[1,66],57:63,63:[1,64],365:$Vm,383:$Vn},{39:[1,67]},{59:68,63:$Ve,113:$Vf,228:$Vg,347:44,348:$Vh,349:$Vi},o($V2,[2,246]),{59:74,63:$Ve,113:$Vf,119:73,228:$Vg,322:69,328:70,330:71,347:44,348:$Vh,349:$Vi,358:$Vo,430:72},{59:74,63:$Ve,113:$Vf,119:78,175:76,177:77,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o([54,55,63,79,95,96,107,112,113,228,253,267,269,270,271,294,295,296,297,298,299,300,301,302,303,304,306,307,348,349,351,352,355,358,362,370,389,390],$Vp,{242:79,30:$Vq,247:$Vr}),{39:[1,82],47:[1,83]},{163:[1,84]},{1:[2,622]},o($V0,$V1,{263:85}),o($V2,[2,25]),{32:[1,86],267:[1,87]},o($Vs,[2,471]),o($Vt,[2,645]),o($Vt,[2,646]),o($Vt,[2,647]),o($Vt,[2,642]),o($Vt,[2,643]),o($Vt,[2,644]),o($Vj,$Vk,{258:51,260:52,170:88,262:$Vl}),{44:89,168:23,169:24,174:$V9,241:$Va},o($Vj,[2,262]),o($Vj,[2,452],{260:90,262:$Vl}),o($Vu,[2,454]),o([30,241,247],$V1,{263:91}),o($V2,[2,29]),{79:[1,92]},{44:93,168:23,169:24,174:$V9,241:$Va},o($Vv,$Vw,{58:94,306:$Vx}),{59:96,63:$Ve,113:$Vf,228:$Vg,347:44,348:$Vh,349:$Vi},o($Vy,$Vw,{58:97,306:$Vx}),o($Vy,$Vw,{58:98,306:$Vx}),o($Vz,[2,761]),o($Vz,[2,762]),o($Vy,$VA,{150:99,306:$VB}),{59:101,63:$Ve,113:$Vf,228:$Vg,347:44,348:$Vh,349:$Vi},o($Vy,$VA,{150:102,306:$VB}),o($Vy,$VA,{150:103,306:$VB}),o($Vy,$VA,{150:104,306:$VB}),o($V2,[2,619]),{16:[1,105]},{16:[2,598]},{16:[2,600]},{16:[2,868],59:74,63:$Ve,113:$Vf,119:106,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($VC,[2,862],{267:[1,107]}),o($Vt,[2,859]),{56:[1,108],358:[1,109]},o([79,241],[2,271],{85:[1,110]}),o($VD,[2,273]),{43:[1,111]},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:114,227:144,228:$Vg,243:112,250:113,253:$VL,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($V81,[2,414]),o($V81,[2,415]),{40:170,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{40:172,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($Vy,[2,258],{164:173,39:[1,174]}),o($V2,$V3,{343:4,19:5,155:6,44:7,20:8,21:9,22:10,23:11,24:12,25:13,26:14,27:15,28:16,29:17,34:19,35:20,156:21,157:22,168:23,169:24,36:25,42:26,158:31,339:175,4:$V4,8:$V5,12:$V6,16:$V7,162:$V8,174:$V9,241:$Va,271:$Vb,321:$Vc,337:$Vd}),{33:176,51:179,54:$VE,55:$VF,59:177,63:$Ve,96:[1,182],113:$Vf,227:183,228:$Vg,267:$VM,268:178,269:[1,180],270:[1,181],347:44,348:$Vh,349:$Vi,352:[1,184],389:$V61,390:$V71,395:186,398:187,469:[1,185],474:150,475:151},{59:188,63:$Ve,113:$Vf,228:$Vg,347:44,348:$Vh,349:$Vi},o($Vj,[2,260]),{81:[1,189]},o($Vu,[2,455]),{30:$Vq,241:$Vp,242:190,247:$Vr},{59:74,63:$Ve,87:193,113:$Vf,119:146,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,412:191,428:192},o($V2,[2,37]),o($V2,[2,54],{347:44,59:194,63:$Ve,113:$Vf,228:$Vg,348:$Vh,349:$Vi}),{95:[1,195]},o($V2,[2,63]),{59:74,63:$Ve,64:196,66:197,72:198,113:$Vf,119:199,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{59:74,63:$Ve,72:200,113:$Vf,119:199,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{59:74,63:$Ve,113:$Vf,119:201,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{370:[1,202]},o($V2,[2,229]),{40:203,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{40:204,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{40:205,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{59:74,63:$Ve,87:138,113:$Vf,119:146,149:209,228:$Vg,323:206,332:207,334:208,347:44,348:$Vh,349:$Vi,358:$Vo,432:210},{16:[2,869]},{59:74,63:$Ve,113:$Vf,119:211,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{358:[1,212]},o($Vt,[2,861]),{59:74,63:$Ve,113:$Vf,119:78,177:213,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{79:[1,214]},o($Vu,[2,403],{244:215,181:217,85:[1,216],182:[1,218]}),o($V91,[2,420]),o($V91,$Va1,{347:44,59:74,395:186,398:187,252:219,459:233,119:235,51:236,32:$Vb1,43:$Vc1,54:$VE,55:$VF,63:$Ve,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,113:$Vf,142:$Vh1,228:$Vg,253:$Vi1,348:$Vh,349:$Vi,352:$Vj1,356:$Vk1,357:$Vl1,358:$Vo,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($V91,[2,436]),o($Vt1,[2,921]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:241,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:242,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:243,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:244,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{79:$Vu1,456:245},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:247,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:249,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,392:$Vv1,395:152,398:153,432:129,460:248,470:137,472:145,474:150,475:151,476:154,524:250,526:251},o($Vt1,[2,553],{310:253,79:$Vw1}),{79:$Vw1,310:255},o($Vt1,[2,551]),o($Vt1,[2,552]),o($Vt1,[2,554]),o($Vx1,[2,1056],{267:[1,256]}),{79:[2,533]},{79:[2,534]},{79:[2,535]},{79:[2,536]},o($Vt1,[2,582],{275:257,277:258,318:$Vy1}),{277:260,318:$Vy1},o($Vt1,[2,490]),o($Vt1,[2,1062]),o($Vz1,[2,875]),o($VA1,[2,498]),o($VA1,[2,499]),o($VA1,[2,500]),{79:[1,261]},{79:[1,262]},o($Vt1,[2,1064]),o($Vt1,[2,1065]),o([32,43,50,54,55,63,77,79,81,85,95,107,108,109,112,113,129,142,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,253,262,264,267,340,344,348,349,352,356,357,358,359,360,361,363,366,367,368,369,371,374,375,376,377,379,380,382,384,385,386,387,388,391,392,437,439,440,441,443,444,445,446,447,448,449,450,451,452,453,454,458,461],[2,885]),{79:[1,263]},{79:[1,264]},{79:[1,265]},o($Vt1,[2,1067]),o($Vt1,[2,1068]),o($Vt1,[2,1076]),o($Vt1,[2,1077]),o($Vt1,[2,1078]),{79:[2,509]},{79:[2,510]},{79:[2,511]},{79:[2,512]},{79:[2,513]},{79:[2,514]},{79:[2,515]},{79:[2,516]},o($Vt1,[2,1069],{267:[1,266]}),{389:[1,267],390:[1,268]},{389:[1,269]},{54:[1,271],56:[1,270]},{55:[1,273],56:[1,272]},o($Vt1,[2,1081]),o($Vt1,[2,1082]),{125:[2,34]},o($VB1,[2,831],{267:[1,274]}),{43:[2,43]},{40:275,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($Vy,[2,259]),o($V2,[2,628]),o($V2,[2,26]),o($V2,[2,473]),o($V2,[2,474],{347:44,59:276,63:$Ve,113:$Vf,228:$Vg,348:$Vh,349:$Vi}),o($V2,[2,476]),o($V2,[2,477]),o($V2,[2,478]),o($V2,[2,479]),o($Vv,[2,1059]),{227:277,267:$VM,389:$V61,390:$V71,474:150,475:151},{227:278,267:$VM,389:$V61,390:$V71,474:150,475:151},o($VC1,[2,769]),o($VC1,[2,770]),o($Vs,[2,472]),o($Vj,$Vk,{258:51,260:52,170:279,262:$Vl}),{169:280,241:$Va},{81:[1,281],85:[1,282]},o($VD1,[2,848]),{32:[1,283]},o($V2,$VE1,{60:284,48:285,49:286,50:$VF1}),{370:[1,288]},o($V2,[2,64]),o($VG1,[2,160],{67:289,124:290,125:[1,291]}),o($VH1,[2,76],{73:292,76:293,77:[1,294],79:[1,295]}),o($VI1,[2,840],{267:[1,296]}),o($VJ1,[2,212],{144:297,146:298,79:[1,299]}),o($V2,[2,777],{151:300,406:[1,301]}),o($Vy,[2,780]),o($V2,[2,236],{153:302,154:[1,303]}),o($V2,[2,238]),o($V2,[2,480]),o($VK1,[2,615],{324:304,85:[1,305],182:[1,306]}),o($VL1,[2,602]),{32:[1,307]},{32:[2,612]},o($VM1,[2,872],{267:[1,308]}),o($VC,[2,863],{267:[1,309]}),o($Vt,[2,860]),o($VD,[2,274]),o($VN1,$VO1,{179:310,487:311}),o($Vu,[2,404]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:114,227:144,228:$Vg,250:312,253:$VL,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($VP1,$VQ1,{248:313,255:314,257:315,264:$VR1}),{40:324,59:74,63:$Ve,79:$Vu1,113:$Vf,119:171,183:317,186:318,207:320,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,456:325,477:319,479:321,481:322,482:323},o($V91,[2,435]),o($VS1,[2,1083],{455:326,95:[1,327]}),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:328,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:329,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:330,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:331,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{77:$Vd1,359:[1,333],374:[1,332],379:$Vq1,380:$Vr1,459:334},{79:[1,335]},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:336,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:337,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:338,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:339,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:340,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:341,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vt1,[2,947]),{97:342,360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},o($Vj2,[2,1130]),o($Vj2,[2,1131]),{51:372,54:$VE,55:$VF,59:74,63:$Ve,113:$Vf,119:371,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,395:186,398:187},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:373,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:374,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:375,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vk2,[2,922],{459:233,32:$Vb1,77:$Vd1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($Vk2,[2,923],{459:233,32:$Vb1,77:$Vd1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($Vk2,[2,924],{459:233,32:$Vb1,77:$Vd1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($Vl2,[2,925],{459:233}),o($Vt1,[2,930]),o($VN1,$VO1,{487:311,456:325,179:376,482:377,79:$Vu1}),{32:$Vb1,77:$Vd1,81:[1,378],95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,459:233,461:$Vs1},o($Vt1,[2,949]),{32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,392:$Vv1,459:233,460:379,461:$Vs1,524:250,526:251},{368:[1,381],369:[1,380],392:$Vv1,526:382},o($Vm2,[2,1215]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:383,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vt1,[2,549]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,81:[1,384],87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:386,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,292:385,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vt1,[2,550]),{59:74,63:$Ve,87:388,113:$Vf,119:146,228:$Vg,253:[1,387],347:44,348:$Vh,349:$Vi,358:$Vo},o($Vt1,[2,488]),o($Vt1,[2,583]),{59:74,63:$Ve,79:[1,391],113:$Vf,119:389,228:$Vg,319:390,347:44,348:$Vh,349:$Vi,358:$Vo},o($Vt1,[2,489]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,81:[1,392],87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:386,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,292:393,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,81:[1,395],87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:394,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o([54,55,63,79,81,95,96,107,112,113,228,267,269,270,271,294,295,296,297,298,299,300,301,302,303,304,306,307,348,349,351,352,355,358,362,370,389,390],$Vp,{242:396,30:$Vq,247:$Vr}),o($Vn2,$Vp,{242:399,30:$Vq,81:[1,398],247:$Vr,253:[1,397]}),o($Vn2,$Vp,{242:400,30:$Vq,81:[1,401],247:$Vr}),o($Vt1,[2,1070],{389:[1,402],390:[1,403]}),o($Vt1,[2,1072]),{389:[1,404]},o($Vt1,[2,1073]),{54:[1,405]},o($Vo2,[2,764]),{55:[1,406]},o($Vo2,[2,767]),{59:74,63:$Ve,113:$Vf,119:407,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{140:[1,408]},o($V2,[2,475]),o($Vv,[2,1060]),o($Vv,[2,1061]),o($Vj,[2,261]),o($Vu,[2,460]),o($V2,[2,794]),{59:74,63:$Ve,87:193,113:$Vf,119:146,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,428:409},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:410,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($V2,[2,55]),o($V2,[2,61]),o([43,81,85,109,340,344],[2,47]),{51:411,54:$VE,55:$VF,395:186,398:187},o([63,113,228,340,344,348,349,358],[2,784]),o($V2,[2,198],{68:412,43:[1,413]}),o($VG1,[2,161]),{126:[1,414]},o($VH1,[2,73]),o($VH1,[2,77]),{40:415,59:74,63:$Ve,113:$Vf,119:171,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{59:74,63:$Ve,80:416,84:417,87:418,113:$Vf,119:146,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{59:74,63:$Ve,113:$Vf,119:419,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{43:$VE1,48:420,49:286,50:$VF1},o($VJ1,[2,213]),{59:74,63:$Ve,87:138,113:$Vf,119:146,147:421,149:422,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,432:210},o($V2,[2,222]),o($V2,[2,778]),o($V2,[2,230]),o($V2,[2,237]),o($V2,$VQ1,{257:315,255:423,264:$VR1}),{59:74,63:$Ve,87:138,113:$Vf,119:146,149:209,228:$Vg,332:424,334:208,347:44,348:$Vh,349:$Vi,358:$Vo,432:210},{40:324,59:74,63:$Ve,79:$Vu1,113:$Vf,119:171,186:425,207:320,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,456:325,477:319,479:321,481:322,482:323},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:427,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,335:426,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{59:74,63:$Ve,87:388,113:$Vf,119:146,228:$Vg,253:[1,428],347:44,348:$Vh,349:$Vi,358:$Vo},{59:74,63:$Ve,113:$Vf,119:429,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{81:[1,430]},{44:438,168:23,169:24,174:$V9,241:$Va,489:431,491:432,493:433,495:434,497:435,499:436,501:437},o($V91,[2,421]),o($Vu,[2,416]),o($Vp2,[2,293],{188:439,189:440,190:[1,441]}),o($VP1,[2,465]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:443,227:144,228:$Vg,265:442,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o([81,190,201,226,232,262,264,340,344],[2,283],{85:[1,444]}),o($Vq2,[2,286]),o($Vq2,[2,1085]),o($Vq2,[2,1087],{204:445,206:446,214:$Vr2,215:$Vs2,216:$Vt2,217:$Vu2,218:$Vv2,219:$Vw2,220:$Vx2,221:$Vy2}),o($Vq2,[2,1088]),o($Vz2,$Va1,{347:44,59:74,395:186,398:187,119:235,51:236,252:455,43:$Vc1,54:$VE,55:$VF,63:$Ve,113:$Vf,228:$Vg,348:$Vh,349:$Vi,358:$Vo}),o($Vz2,$Va1,{347:44,59:74,395:186,398:187,119:235,51:236,252:456,43:$Vc1,54:$VE,55:$VF,63:$Ve,113:$Vf,228:$Vg,348:$Vh,349:$Vi,358:$Vo}),o($VA2,[2,1099]),o($VA2,[2,1101]),{96:[1,457],247:[1,460],269:[1,458],270:[1,459]},o($VS1,[2,1084]),o($VB2,[2,932],{459:233,77:$Vd1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VB2,[2,933],{459:233,77:$Vd1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VB2,[2,934],{459:233,77:$Vd1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VB2,[2,935],{459:233,77:$Vd1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),{79:[1,461]},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:462,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vt1,[2,948]),o($VN1,$VO1,{347:44,59:74,308:116,309:124,305:125,273:126,311:127,432:129,274:134,276:135,278:136,470:137,87:138,285:139,286:140,287:141,227:144,472:145,119:146,291:147,474:150,475:151,395:152,398:153,476:154,487:311,179:463,457:464,138:465,54:$VE,55:$VF,63:$Ve,79:$VG,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,306:$V$,307:$V01,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71}),{32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,458:[1,466],459:233,461:$Vs1},o($VC2,[2,942],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VC2,[2,943],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VD2,[2,944],{459:233,77:$Vd1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VD2,[2,945],{459:233,77:$Vd1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VD2,[2,946],{459:233,77:$Vd1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($Vt1,[2,951]),o($VE2,[2,888]),o($VE2,[2,889]),o($VE2,[2,890]),o($VE2,$VF2,{438:467,79:$VG2}),o($VE2,$VF2,{438:469,79:$VG2}),o($VE2,[2,893]),o($VE2,[2,894]),o($VE2,$VH2,{442:470,79:$VI2}),o($VE2,[2,896]),o($VE2,[2,897]),o($VE2,[2,898]),o($VE2,[2,899]),o($VE2,[2,900]),o($VE2,[2,901]),o($VE2,$VH2,{442:472,79:$VI2}),o($VE2,$VH2,{442:473,79:$VI2}),o($VE2,[2,904]),o($VE2,[2,905]),o($VE2,[2,906]),o($VE2,[2,907]),o($VE2,[2,908]),o($VE2,[2,909]),o($VE2,[2,910]),o($VE2,[2,911]),o($VE2,[2,912]),o($VE2,[2,913]),o($VE2,$VF2,{438:474,79:$VG2}),o($VE2,$VF2,{438:475,79:$VG2}),o($Vj2,[2,1132]),o($Vj2,[2,1133]),o($Vl2,[2,1191],{459:233}),o($Vl2,[2,1192],{459:233}),o($Vl2,[2,1193],{459:233}),{81:[1,476]},{43:$Vc1,51:236,54:$VE,55:$VF,59:74,63:$Ve,81:$Va1,113:$Vf,119:235,228:$Vg,252:477,347:44,348:$Vh,349:$Vi,358:$Vo,395:186,398:187},o($Vt1,[2,931]),o($Vt1,[2,950]),o($Vt1,[2,1200]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:478,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vm2,[2,1216]),{32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,386:[1,479],459:233,461:$Vs1},o($Vt1,[2,564]),{81:[1,480],85:$VJ2},o($VD1,[2,569],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($Vx1,[2,1057]),o($Vz1,[2,876]),o($Vt1,[2,585]),o($Vt1,[2,586]),o($VK2,[2,1144],{503:482,507:483,125:[1,484]}),{318:[2,528]},{81:[1,485],85:$VJ2},{32:$Vb1,43:[1,486],77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,459:233,461:$Vs1},o($Vt1,[2,538]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,81:[1,487],87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:386,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,292:488,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{81:[1,489]},o($VA1,[2,518]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:386,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,292:490,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:491,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($VA1,[2,524]),o($Vt1,[2,1071]),{389:[1,492]},o($Vt1,[2,1074]),o($Vo2,[2,763]),o($Vo2,[2,766]),o($VB1,[2,832],{267:[1,493]}),{79:$VL2,165:494,166:495},o($VD1,[2,849]),o($VD1,[2,854],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o([43,50,81,85,95,96,109,340,344],[2,48]),o($V2,[2,68]),o($VN1,[2,202],{143:497}),{127:498,129:[1,499]},o($VH1,[2,78]),{81:[1,500],85:[1,501]},o($VD1,[2,84]),{88:502,97:503,98:504,99:505,100:506,101:507,102:508,103:509,107:$VM2,112:$VN2,113:$VO2,360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},o($VI1,[2,841],{267:[1,513]}),{43:[1,514]},{81:[1,515],85:[1,516]},o($VD1,$VE1,{49:286,48:517,50:$VF1}),o($V2,[2,588]),o($VL1,[2,603]),o($VK1,[2,616]),o($VL1,[2,608]),o($VL1,[2,613],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VM1,[2,873]),o($VC,[2,864]),o($VD,[2,279]),{81:[2,1113]},{81:[2,1115]},{81:[2,1117]},{81:[2,1119]},{81:[2,1121]},{81:[2,1123]},{81:[2,1125]},{81:[2,1127]},o($VP2,[2,322],{199:518,200:519,201:[1,520]}),o($Vp2,[2,294]),{126:[1,521]},o($VP1,[2,466]),o($VP1,[2,469],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),{40:324,59:74,63:$Ve,79:$Vu1,113:$Vf,119:171,186:522,207:320,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,456:325,477:319,479:321,481:322,482:323},o($Vq2,[2,1091],{206:523,214:$Vr2,215:$Vs2,216:$Vt2,217:$Vu2,218:$Vv2,219:$Vw2,220:$Vx2,221:$Vy2}),{40:324,59:74,63:$Ve,79:$Vu1,113:$Vf,119:171,207:524,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,456:325,481:322,482:323},{215:[1,525]},{215:[1,526],217:[1,527]},{215:[1,528]},o($VQ2,[2,347]),{215:[1,530],217:[1,531],218:[1,529],220:[1,532]},{215:[1,533]},{215:[1,535],217:[1,536],218:[1,534],220:[1,537]},{215:[1,538]},o($Vz2,[2,1094]),o($Vz2,[2,1095]),o($Vt1,[2,926]),o($Vt1,[2,927]),o($Vt1,[2,928]),{182:[1,539]},o($VN1,$VO1,{347:44,59:74,308:116,309:124,305:125,273:126,311:127,432:129,274:134,276:135,278:136,470:137,87:138,285:139,286:140,287:141,227:144,472:145,119:146,291:147,474:150,475:151,395:152,398:153,476:154,487:311,138:465,179:540,457:541,54:$VE,55:$VF,63:$Ve,79:$VG,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,306:$V$,307:$V01,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71}),{32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,458:[1,542],459:233,461:$Vs1},{81:[1,543]},{81:[1,544],85:$VR2},o($VS2,[2,1041],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:546,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($VE2,[2,891]),{389:[1,547]},o($VE2,[2,892]),o($VE2,[2,895]),{389:[1,548]},o($VE2,[2,902]),o($VE2,[2,903]),o($VE2,[2,914]),o($VE2,[2,915]),o($VT2,[2,1109]),{81:[1,549]},{32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,369:[1,550],374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,459:233,461:$Vs1},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:551,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vt1,[2,565]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:552,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{81:[2,1150],231:554,232:$VU2,504:553},o($VK2,[2,1145]),{126:[1,556]},{318:[2,529]},{97:557,360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},o($VA1,[2,504]),{81:[1,558],85:$VJ2},o($VA1,[2,517]),{81:[1,559],85:$VJ2},{32:$Vb1,77:$Vd1,81:[1,560],95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,459:233,461:$Vs1},o($Vt1,[2,1075]),{59:74,63:$Ve,113:$Vf,119:561,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($V2,[2,249],{85:[1,562]}),o($VV2,[2,255]),{54:$VE,55:$VF,59:74,63:$Ve,87:138,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,167:563,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:564,309:124,311:127,347:44,348:$Vh,349:$Vi,358:$Vo,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{44:565,168:23,169:24,174:$V9,241:$Va},o($VG1,[2,162]),{79:[1,567],130:566},o($VH1,[2,82]),{59:74,63:$Ve,84:568,87:418,113:$Vf,119:146,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($VD1,[2,98],{89:569,92:570,93:571,49:574,50:$VF1,95:$VW2,96:$VX2}),o($VY2,[2,110]),o($VY2,[2,111]),o($VY2,[2,112]),o($VY2,[2,113]),o($VY2,[2,114]),o($VY2,[2,115]),o($VY2,[2,116]),{108:[1,575]},{108:[1,576]},{108:[1,577]},{59:74,63:$Ve,113:$Vf,119:578,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{44:579,168:23,169:24,174:$V9,241:$Va},o($VJ1,[2,214]),{59:74,63:$Ve,87:138,113:$Vf,119:146,149:580,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,432:210},o($VD1,[2,216]),o($VZ2,[2,385],{230:581,231:582,232:$VU2}),o($VP2,[2,323]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:583,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:585,191:584,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vq2,[2,287]),{40:324,59:74,63:$Ve,79:$Vu1,113:$Vf,119:171,207:586,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,456:325,481:322,482:323},o($V_2,$V$2,{208:587,222:$V03}),o($VQ2,[2,343]),o($VQ2,[2,344]),{215:[1,589]},o($VQ2,[2,346]),{215:[1,590]},o($VQ2,[2,349]),{215:[1,591]},{215:[1,592]},o($VQ2,[2,352]),{215:[1,593]},o($VQ2,[2,354]),{215:[1,594]},{215:[1,595]},o($VQ2,[2,357]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:596,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{81:[1,597]},{81:[1,598],85:$VR2},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:599,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vt1,[2,938]),o($Vt1,[2,939]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:600,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o([43,54,55,63,81,85,113,129,182,190,201,214,215,216,217,218,219,220,221,226,228,232,239,240,262,264,340,344,348,349,356,358,359,368,369,377,382,386,392,458],[2,941],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),{81:[1,601]},{81:[1,602],85:[1,603]},o($VT2,[2,1110]),o($Vt1,[2,1201]),o($Vm2,[2,1222],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VD1,[2,570],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),{81:[1,604]},{81:[2,1155],129:[1,609],382:[1,608],508:605,510:606,511:607},{126:[1,610]},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:465,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,457:611,470:137,472:145,474:150,475:151,476:154},{81:[1,612]},o($VA1,[2,505]),o($VA1,[2,519]),o($VA1,[2,523]),o($VB1,[2,833]),{79:$VL2,166:613},{81:[1,614],85:[1,615]},o($VD1,[2,1054]),o($V2,[2,199]),{79:[1,617],131:616},{59:74,63:$Ve,87:619,113:$Vf,119:146,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo,424:618},o($VD1,[2,85]),o($VD1,[2,94]),o($VD1,[2,99],{49:574,93:620,50:$VF1,95:$VW2,96:$VX2}),o($V13,[2,100]),{96:[1,621]},o($V13,[2,107]),o($V13,[2,108]),{88:622,97:503,98:504,99:505,100:506,101:507,102:508,103:509,107:$VM2,109:[1,623],112:$VN2,113:$VO2,360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},{97:624,109:[1,625],360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},{59:74,63:$Ve,109:[1,627],113:$Vf,114:626,116:628,119:629,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($VI1,[2,842]),o($V2,[2,203]),o($VD1,$VE1,{49:286,48:630,50:$VF1}),o($Vu,[2,378],{224:631,225:632,226:[1,633]}),o($VZ2,[2,386]),o($VP2,[2,324],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($Vp2,[2,295],{85:[1,634]}),o($V23,[2,310],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($V_2,$V$2,{208:635,222:$V03}),o($V_2,[2,330]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:636,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($VQ2,[2,345]),o($VQ2,[2,348]),o($VQ2,[2,350]),o($VQ2,[2,351]),o($VQ2,[2,353]),o($VQ2,[2,355]),o($VQ2,[2,356]),o($Vl2,[2,929],{459:233}),o($Vt1,[2,936]),o($Vt1,[2,937]),o($Vk2,[2,940],{459:233,32:$Vb1,77:$Vd1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,357:$Vl1,374:$Vn1,376:$Vo1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VS2,[2,1042],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VE2,[2,917]),o($VE2,[2,919]),{389:[1,637]},o($Vt1,[2,1139]),{81:[2,1151]},{81:[2,1156]},{359:[1,638],515:[1,639]},o($V33,[2,1173]),o($V33,[2,1174]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:642,227:144,228:$Vg,233:640,236:641,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($VK2,[2,1146],{85:$VR2}),o($Vt1,[2,537]),o($VV2,[2,256]),o($VV2,[2,257]),{54:$VE,55:$VF,59:74,63:$Ve,87:138,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:643,309:124,311:127,347:44,348:$Vh,349:$Vi,358:$Vo,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($VG1,[2,166]),{125:$V43,134:644,136:645},{81:[1,647],85:[1,648]},o($VD1,[2,824]),o($V13,[2,101]),o($V13,[2,106]),{109:[1,649]},o($VY2,[2,121]),{85:[1,650]},o($VY2,[2,125]),{85:[1,652],109:[1,651]},o($VY2,[2,131]),o($V53,[2,133]),{120:[1,653]},o($VD1,[2,217]),o($Vu,[2,440]),o($Vu,[2,379]),{227:654,228:[1,655],267:$VM,389:$V61,390:$V71,474:150,475:151},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:656,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($V_2,[2,331]),o($V_2,[2,373],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),{81:[1,657]},o($V63,$V73,{512:658}),o($V63,$V73,{512:659}),o([81,129,226,262,340,344,382],[2,387],{85:[1,660]}),o($V83,[2,390]),o($V83,[2,400],{459:233,238:661,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,239:[1,662],240:[1,663],253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VD1,[2,1055]),{81:[1,664],85:[1,665]},o($VD1,[2,175]),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:666,140:[1,667],227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{79:[2,821]},{59:74,63:$Ve,87:668,113:$Vf,119:146,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},o($VY2,[2,120]),{88:669,97:503,98:504,99:505,100:506,101:507,102:508,103:509,107:$VM2,112:$VN2,113:$VO2,360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},o($VY2,[2,130]),{59:74,63:$Ve,113:$Vf,116:670,119:629,228:$Vg,347:44,348:$Vh,349:$Vi,358:$Vo},{88:671,97:503,98:504,99:505,100:506,101:507,102:508,103:509,107:$VM2,112:$VN2,113:$VO2,360:$VT1,361:$VU1,363:$VV1,366:$VW1,367:$VX1,371:$VY1,375:$VZ1,384:$V_1,385:$V$1,387:$V02,388:$V12,391:$V22,437:$V32,439:$V42,440:$V52,441:$V62,443:$V72,444:$V82,445:$V92,446:$Va2,447:$Vb2,448:$Vc2,449:$Vd2,450:$Ve2,451:$Vf2,452:$Vg2,453:$Vh2,454:$Vi2},o($Vu,[2,380],{85:[1,672]}),o($Vu,[2,382],{85:[1,673]}),o($V23,[2,311],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),o($VE2,[2,920]),o($V93,$Va3,{513:674,523:675,364:$Vb3,389:$Vc3,515:$Vd3}),o($V93,$Va3,{523:675,513:679,364:$Vb3,389:$Vc3,515:$Vd3}),{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:642,227:144,228:$Vg,236:680,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($V83,[2,397]),o($V83,[2,401]),o($V83,[2,402]),o($VG1,[2,172]),{125:$V43,136:681},{32:$Vb1,77:$Vd1,95:$Ve1,108:[1,683],109:$Vg1,139:682,142:[1,684],253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,459:233,461:$Vs1},{108:$Ve3,139:685,142:$Vf3},o($VD1,[2,825]),{109:[1,688]},o($V53,[2,134]),o($V53,$VE1,{49:286,48:689,50:$VF1}),{227:690,267:$VM,389:$V61,390:$V71,474:150,475:151},{228:[1,691]},{81:$Vg3,356:$Vh3,514:692},{378:[1,694]},{381:[1,695]},o($Vi3,[2,1186]),o($Vi3,[2,1187]),{81:$Vg3,356:$Vh3,514:696},o($V83,[2,391]),o($VD1,[2,176]),{140:[1,697]},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:329,140:$Vj3,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:331,140:$Vk3,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:698,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},o($Vn2,$Vj3),o($Vn2,$Vk3),o($VY2,[2,124]),o($V53,[2,140]),o($Vu,[2,381]),o($Vu,[2,383]),{81:[2,1157]},{364:[1,699],389:$Vc3,515:$Vd3,523:700},o($V93,[2,1176]),o($V93,[2,1177]),{81:[2,1158]},o($VD1,[2,184],{139:701,108:$Ve3,142:$Vf3}),o($VD1,[2,183],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1}),{381:[1,702]},{372:[1,703]},{54:$VE,55:$VF,59:74,63:$Ve,79:$VG,87:138,95:$VH,96:$VI,107:$VJ,112:$VK,113:$Vf,119:146,138:704,227:144,228:$Vg,267:$VM,269:$VN,270:$VO,271:$VP,273:126,274:134,276:135,278:136,285:139,286:140,287:141,291:147,294:$VQ,295:$VR,296:$VS,297:$VT,298:$VU,299:$VV,300:$VW,301:$VX,302:$VY,303:$VZ,304:$V_,305:125,306:$V$,307:$V01,308:116,309:124,311:127,347:44,348:$Vh,349:$Vi,351:$V11,352:$V21,355:$V31,358:$Vo,362:$V41,370:$V51,389:$V61,390:$V71,395:152,398:153,432:129,470:137,472:145,474:150,475:151,476:154},{81:[2,1181]},{81:[2,1182]},o($VD1,[2,182],{459:233,32:$Vb1,77:$Vd1,95:$Ve1,108:$Vf1,109:$Vg1,142:$Vh1,253:$Vi1,352:$Vj1,356:$Vk1,357:$Vl1,359:$Vm1,374:$Vn1,376:$Vo1,377:$Vp1,379:$Vq1,380:$Vr1,461:$Vs1})],
defaultActions: {37:[2,622],70:[2,598],71:[2,600],106:[2,869],130:[2,533],131:[2,534],132:[2,535],133:[2,536],155:[2,509],156:[2,510],157:[2,511],158:[2,512],159:[2,513],160:[2,514],161:[2,515],162:[2,516],170:[2,34],172:[2,43],209:[2,612],392:[2,528],431:[2,1113],432:[2,1115],433:[2,1117],434:[2,1119],435:[2,1121],436:[2,1123],437:[2,1125],438:[2,1127],485:[2,529],605:[2,1151],606:[2,1156],647:[2,821],692:[2,1157],696:[2,1158],702:[2,1181],703:[2,1182]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
/**
 * @param {string} input
 *
 * @return {AutocompleteParseResult}
 */
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSyntaxParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 5; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 393; 
break;
case 5: this.popState(); return 458; 
break;
case 6: return 30; 
break;
case 7: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('ALTER', yy_.yylloc, yy.lexer.upcomingInput()); return 4; 
break;
case 8: return 356; 
break;
case 9: return 43; 
break;
case 10: return 239; 
break;
case 11: this.begin('between'); return 359; 
break;
case 12: return 360; 
break;
case 13: return 437; 
break;
case 14: return 361; 
break;
case 15: return 126; 
break;
case 16: return 406; 
break;
case 17: return 362; 
break;
case 18: return 363; 
break;
case 19: return 439; 
break;
case 20: return 50; 
break;
case 21: parser.determineCase(yy_.yytext); return 8; 
break;
case 22: return 214; 
break;
case 23: return 364; 
break;
case 24: return 365; 
break;
case 25: return 440; 
break;
case 26: return 441; 
break;
case 27: return 366; 
break;
case 28: return 240; 
break;
case 29: return 247; 
break;
case 30: return 357; 
break;
case 31: return 367; 
break;
case 32: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('DROP', yy_.yylloc, yy.lexer.upcomingInput()); return 12; 
break;
case 33: return 368; 
break;
case 34: return 369; 
break;
case 35: parser.yy.correlatedSubQuery = true; return 370; 
break;
case 36: return 270; 
break;
case 37: return 371; 
break;
case 38: return 443; 
break;
case 39: return 444; 
break;
case 40: return 372; 
break;
case 41: parser.determineCase(yy_.yytext); return 182; 
break;
case 42: return 216; 
break;
case 43: return 190; 
break;
case 44: return 201; 
break;
case 45: return 306; 
break;
case 46: return 374; 
break;
case 47: return 218; 
break;
case 48: return 162; 
break;
case 49: return 375; 
break;
case 50: return 445; 
break;
case 51: return 163; 
break;
case 52: return 376; 
break;
case 53: return 215; 
break;
case 54: return 219; 
break;
case 55: return 77; 
break;
case 56: return 226; 
break;
case 57: return 95; 
break;
case 58: return 96; 
break;
case 59: return 446; 
break;
case 60: return 447; 
break;
case 61: return 222; 
break;
case 62: return 348; 
break;
case 63: return 377; 
break;
case 64: return 232; 
break;
case 65: return 217; 
break;
case 66: return 125; 
break;
case 67: return 378; 
break;
case 68: return 154; 
break;
case 69: return 129; 
break;
case 70: return 379; 
break;
case 71: return 221; 
break;
case 72: return 380; 
break;
case 73: return 381; 
break;
case 74: return 63; 
break;
case 75: return 382; 
break;
case 76: return 383; 
break;
case 77: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 241; 
break;
case 78: return 220; 
break;
case 79: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SET', yy_.yylloc); return 16; 
break;
case 80: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SHOW', yy_.yylloc); return 'SHOW'; 
break;
case 81: return 384; 
break;
case 82: return 385; 
break;
case 83: return 39; 
break;
case 84: return 449; 
break;
case 85: return 386; 
break;
case 86: return 450; 
break;
case 87: return 387; 
break;
case 88: return 451; 
break;
case 89: return 452; 
break;
case 90: return 453; 
break;
case 91: return 388; 
break;
case 92: return 'TO'; 
break;
case 93: return 269; 
break;
case 94: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('TRUNCATE', yy_.yylloc, yy.lexer.upcomingInput()); return 271; 
break;
case 95: return 515; 
break;
case 96: return 262; 
break;
case 97: parser.determineCase(yy_.yytext); return 321; 
break;
case 98: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('USE', yy_.yylloc); return 337; 
break;
case 99: return 140; 
break;
case 100: return 454; 
break;
case 101: return 391; 
break;
case 102: return 47; 
break;
case 103: return 392; 
break;
case 104: return 264; 
break;
case 105: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('WITH', yy_.yylloc); return 174; 
break;
case 106: return 318; 
break;
case 107: return 63; 
break;
case 108: yy.lexer.unput('('); yy_.yytext = 'avg'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 294; 
break;
case 109: yy.lexer.unput('('); yy_.yytext = 'cast'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 307; 
break;
case 110: yy.lexer.unput('('); yy_.yytext = 'count'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 302; 
break;
case 111: yy.lexer.unput('('); yy_.yytext = 'max'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 295; 
break;
case 112: yy.lexer.unput('('); yy_.yytext = 'min'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 296; 
break;
case 113: yy.lexer.unput('('); yy_.yytext = 'stddev_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 297; 
break;
case 114: yy.lexer.unput('('); yy_.yytext = 'stddev_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 298; 
break;
case 115: yy.lexer.unput('('); yy_.yytext = 'sum'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 303; 
break;
case 116: yy.lexer.unput('('); yy_.yytext = 'var_pop'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 299; 
break;
case 117: yy.lexer.unput('('); yy_.yytext = 'var_samp'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 300; 
break;
case 118: yy.lexer.unput('('); yy_.yytext = 'variance'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 301; 
break;
case 119: yy.lexer.unput('('); yy_.yytext = 'cume_dist'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 120: yy.lexer.unput('('); yy_.yytext = 'dense_rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 121: yy.lexer.unput('('); yy_.yytext = 'first_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 122: yy.lexer.unput('('); yy_.yytext = 'lag'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 123: yy.lexer.unput('('); yy_.yytext = 'last_value'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 124: yy.lexer.unput('('); yy_.yytext = 'lead'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 125: yy.lexer.unput('('); yy_.yytext = 'rank'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 126: yy.lexer.unput('('); yy_.yytext = 'row_number'; parser.addFunctionLocation(yy_.yylloc, yy_.yytext); return 304; 
break;
case 127: return 389; 
break;
case 128: return 389; 
break;
case 129: return 390; 
break;
case 130: return 349; 
break;
case 131: parser.yy.cursorFound = true; return 5; 
break;
case 132: parser.yy.cursorFound = true; return 393; 
break;
case 133: return 373; 
break;
case 134: parser.addFileLocation(yy_.yylloc, yy_.yytext); return 520; 
break;
case 135: this.popState(); return 521; 
break;
case 136: return 340; 
break;
case 137: return 356; 
break;
case 138: return 377; 
break;
case 139: return 32; 
break;
case 140: return 108; 
break;
case 141: return 109; 
break;
case 142: return 142; 
break;
case 143: return 142; 
break;
case 144: return 142; 
break;
case 145: return 142; 
break;
case 146: return 142; 
break;
case 147: return 352; 
break;
case 148: return 253; 
break;
case 149: return 357; 
break;
case 150: return 357; 
break;
case 151: return 357; 
break;
case 152: return 357; 
break;
case 153: return 357; 
break;
case 154: return 357; 
break;
case 155: return 461; 
break;
case 156: return 85; 
break;
case 157: return 267; 
break;
case 158: return 120; 
break;
case 159: return 344; 
break;
case 160: return 355; 
break;
case 161: return 351; 
break;
case 162: return 79; 
break;
case 163: return 81; 
break;
case 164: return 353; 
break;
case 165: return 354; 
break;
case 166: return 228; 
break;
case 167: this.begin('backtickedValue'); return 358; 
break;
case 168:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 397;
                                             }
                                             return 56;
                                           
break;
case 169: this.popState(); return 358; 
break;
case 170: this.begin('singleQuotedValue'); return 54; 
break;
case 171:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 397;
                                             }
                                             return 56;
                                           
break;
case 172: this.popState(); return 54; 
break;
case 173: this.begin('doubleQuotedValue'); return 55; 
break;
case 174:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 397;
                                             }
                                             return 56;
                                           
break;
case 175: this.popState(); return 55; 
break;
case 176: return 340; 
break;
case 177: /* To prevent console logging of unknown chars */ 
break;
case 178: 
break;
case 179: 
break;
case 180: 
break;
case 181: 
break;
case 182: 
break;
case 183:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:ALL)/i,/^(?:ALTER)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:ASC)/i,/^(?:BETWEEN)/i,/^(?:BIGINT)/i,/^(?:BINARY)/i,/^(?:BOOLEAN)/i,/^(?:BY)/i,/^(?:CASCADE)/i,/^(?:CASE)/i,/^(?:CHAR)/i,/^(?:CHARACTER)/i,/^(?:COMMENT)/i,/^(?:CREATE)/i,/^(?:CROSS)/i,/^(?:CURRENT)/i,/^(?:DATABASE)/i,/^(?:DATE)/i,/^(?:DATETIME)/i,/^(?:DECIMAL)/i,/^(?:DESC)/i,/^(?:DISTINCT)/i,/^(?:DIV)/i,/^(?:DOUBLE)/i,/^(?:DROP)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXISTS)/i,/^(?:FALSE)/i,/^(?:FLOAT)/i,/^(?:FLOAT4)/i,/^(?:FLOAT8)/i,/^(?:FOLLOWING)/i,/^(?:FROM)/i,/^(?:FULL)/i,/^(?:GROUP)/i,/^(?:HAVING)/i,/^(?:IF)/i,/^(?:IN)/i,/^(?:INNER)/i,/^(?:INSERT)/i,/^(?:INT)/i,/^(?:INTEGER)/i,/^(?:INTO)/i,/^(?:IS)/i,/^(?:JOIN)/i,/^(?:LEFT)/i,/^(?:LIKE)/i,/^(?:LIMIT)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:NUMBER)/i,/^(?:NUMERIC)/i,/^(?:ON)/i,/^(?:OPTION)/i,/^(?:OR)/i,/^(?:ORDER)/i,/^(?:OUTER)/i,/^(?:PARTITION)/i,/^(?:PRECEDING)/i,/^(?:PURGE)/i,/^(?:RANGE)/i,/^(?:REGEXP)/i,/^(?:RIGHT)/i,/^(?:RLIKE)/i,/^(?:ROW)/i,/^(?:ROLE)/i,/^(?:ROWS)/i,/^(?:SCHEMA)/i,/^(?:SELECT)/i,/^(?:SEMI)/i,/^(?:SET)/i,/^(?:SHOW)/i,/^(?:SMALLINT)/i,/^(?:STRING)/i,/^(?:TABLE)/i,/^(?:TEXT)/i,/^(?:THEN)/i,/^(?:TIME)/i,/^(?:TIMESTAMP)/i,/^(?:TIMESTAMP_LTZ)/i,/^(?:TIMESTAMP_NTZ)/i,/^(?:TIMESTAMP_TZ)/i,/^(?:TINYINT)/i,/^(?:TO)/i,/^(?:TRUE)/i,/^(?:TRUNCATE)/i,/^(?:UNBOUNDED)/i,/^(?:UNION)/i,/^(?:UPDATE)/i,/^(?:USE)/i,/^(?:VALUES)/i,/^(?:VARBINARY)/i,/^(?:VARCHAR)/i,/^(?:VIEW)/i,/^(?:WHEN)/i,/^(?:WHERE)/i,/^(?:WITH)/i,/^(?:OVER)/i,/^(?:ROLE)/i,/^(?:AVG\s*\()/i,/^(?:CAST\s*\()/i,/^(?:COUNT\s*\()/i,/^(?:MAX\s*\()/i,/^(?:MIN\s*\()/i,/^(?:STDDEV_POP\s*\()/i,/^(?:STDDEV_SAMP\s*\()/i,/^(?:SUM\s*\()/i,/^(?:VAR_POP\s*\()/i,/^(?:VAR_SAMP\s*\()/i,/^(?:VARIANCE\s*\()/i,/^(?:CUME_DIST\s*\()/i,/^(?:DENSE_RANK\s*\()/i,/^(?:FIRST_VALUE\s*\()/i,/^(?:LAG\s*\()/i,/^(?:LAST_VALUE\s*\()/i,/^(?:LEAD\s*\()/i,/^(?:RANK\s*\()/i,/^(?:ROW_NUMBER\s*\()/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:\s+['"])/i,/^(?:[^'"\u2020\u2021]+)/i,/^(?:['"])/i,/^(?:$)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\$\{[^}]*\})/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"hdfs":{"rules":[131,132,133,134,135,136,179],"inclusive":false},"doubleQuotedValue":{"rules":[174,175,182],"inclusive":false},"singleQuotedValue":{"rules":[171,172,181],"inclusive":false},"backtickedValue":{"rules":[168,169,180],"inclusive":false},"between":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,176,177,178,183],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,170,173,176,177,183],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default genericSyntaxParser;
